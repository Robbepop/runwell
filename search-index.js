var searchIndex = JSON.parse('{\
"ci":{"doc":"Runs CI scripts locally on the users computer.","t":[5,5,5,5,5],"n":["call","cargo","git","main","rustup"],"q":["ci","","","",""],"d":["Invokes the given command with the provided arguments.","Invokes the <code>cargo</code> command with the provided arguments.","Invokes the <code>git</code> command with the provided arguments.","","Invokes the <code>rustup</code> command with the provided arguments."],"i":[0,0,0,0,0],"f":[[[["str",15]]],[[]],[[]],[[]],[[]]],"p":[]},\
"runwell_entity":{"doc":"Data structures for entity component management.","t":[8,3,3,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,4,3,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,4,3,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DisplayHook","EntityArena","Idx","MAX_U32","PhantomEntityArena","RawIdx","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from_raw","from_u32","get_hash","get_hash","hash","hash","into","into","into_raw","into_u32","ne","partial_cmp","partial_cmp","primary","secondary","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Entities","EntitiesMut","EntityArena","Indices","Iter","IterMut","PhantomEntityArena","alloc","alloc_default","alloc_some","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","contains_key","contains_key","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","get","get_mut","index","index_mut","indices","indices","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","iter","iter_mut","len","len","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","nth","nth","nth_back","nth_back","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","default_bitvec","default_map","default_vec","map","vec","Components","DefaultComponentBitVec","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","components","default","eq","fmt","from","from","from","get","into","into","into","into_iter","into_iter","iter","next","next","replace","reserve_exact","set","shrink_to_fit","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Components","DefaultComponentMap","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","components","default","eq","fmt","from","from","from","index","index_mut","into","into","into","into_iter","into_iter","iter","next","next","reserve_exact","shrink_to_fit","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Components","DefaultComponentVec","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","components","default","eq","fmt","from","from","from","index","index_mut","into","into","into","into_iter","into_iter","iter","next","next","reserve_exact","shrink_to_fit","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ComponentMap","Components","ComponentsMut","Entry","Iter","IterMut","Occupied","OccupiedEntry","Vacant","VacantEntry","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","components","components_mut","contains_key","default","entry","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","get_mut","get_mut","index","index_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","len","next","next","next","next","or_default","or_insert","or_insert_with","remove","remove","remove_entry","reserve_exact","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ComponentVec","Components","ComponentsMut","Entry","Iter","IterMut","Occupied","OccupiedEntry","Vacant","VacantEntry","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","components","components_mut","contains_key","default","entry","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","get_mut","get_mut","index","index_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","len","next","next","next","next","or_default","or_insert","or_insert_with","remove","remove","remove_entry","reserve_exact","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["runwell_entity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_entity::primary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_entity::secondary","","","","","runwell_entity::secondary::default_bitvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_entity::secondary::default_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_entity::secondary::default_vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_entity::secondary::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_entity::secondary::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A hook to customize the <code>Display</code> implementation of type …","Primary map to create new entities and store required …","The index of an entity allocated in an entity arena that …","The maximum <code>u32</code> raw value that is allows as underlying …","Primary map to create new entities without the need to …","The raw index of an entity.","","","","","","","","","","","","","","","","","","","","Creates a new index from a [<code>RawIdx</code>].","Constructs a raw index from an <code>u32</code> value.","","","","","","","Converts this index into the underlying [<code>RawIdx</code>].","Converts the raw index into its underlying <code>u32</code> value.","","","","Data structure to create new unique entities.","Data structures to add, remove and query components for …","","","","","","","","","","","Iterator yielding shared references to allocated values …","Iterator yielding mutable reference to allocated values …","Primary map to create new entities and store required …","Iterator yielding the indices of allocated entities in …","Iterator over the keys and shared references of their …","Iterator over the keys and exclusive references of their …","Primary map to create new entities without the need to …","Allocates a new entity and returns a unique index to it.","Allocates the given amount of new entities and …","Allocates some <code>amount</code> of new entities returning the index …","","","","","","","","","","","","","","","Clears the entire entity arena.","Clears the entire entity arena.","","","","","Returns <code>true</code> if the entity at the index has been …","Returns <code>true</code> if the entity at the index has been …","","","","","","","","","","","","","","","","","","Returns a shared reference to the entity at the index if …","Returns an exclusive reference to the entity at the index …","","","Returns an iterator over the indices of the stored …","Returns an iterator over the indices of the stored …","","","","","","","","","","","","","Returns <code>true</code> if no entities have yet been created.","Returns <code>true</code> if no entities have yet been created.","Returns an iterator over the indices and shared …","Returns an iterator over the indices and shared …","Returns the number of created entities.","Returns the number of created entities.","","","","","","","","","","","","","","","Reallocates the entity arena to make it take up as little …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over shared references to the …","Returns an iterator over mutable references to the …","Vector-like data structure to efficiently associate a …","Map-like container to associate every entity to a …","Vector-like container to associate every entity to a …","Container to associate some entities to components in a …","Container to associate some entities to components in a …","Iterator over the components of a default component …","Container where every entity has a <code>bool</code> component that is …","Iterator over the indices and components of a default …","","","","","","","Clears the default component bit-vector for reusing its …","","","Returns an iterator yielding the components of the …","","","","","","","Returns the current <code>bool</code> value of the keyed entity.","","","","","","Returns an iterator yielding the indices and components …","","","Replaces the current <code>bool</code> value (if any) of the entity …","Reserves the minimum capacity for exactly <code>additional</code> more …","Sets the <code>bool</code> component of the keyed entity to the …","Shrinks the memory consumption of the default component …","","","","","","","","","","","","","Iterator over the components of a default component map.","Container where every entity has a component that is …","Iterator over the indices and components of a default …","","","","","","","Clears the default component vector for reusing its …","","","Returns an iterator yielding the components of the …","","","","","","","","","","","","","","Returns an iterator yielding the indices and components …","","","Reserves the minimum capacity for exactly <code>additional</code> more …","Shrinks the memory consumption of the default component …","","","","","","","","","","","","","Iterator over the components of a default component …","Container where every entity has a component that is …","Iterator over the indices and components of a default …","","","","","","","Clears the default component vector for reusing its …","","","Returns an iterator yielding the components of the …","","","","","","","","","","","","","","Returns an iterator yielding the indices and components …","","","Reserves the minimum capacity for exactly <code>additional</code> more …","Shrinks the memory consumption of the default component …","","","","","","","","","","","","","Sparse secondary map to associated new components for …","Iterator yielding shared references to the components.","Iterator yielding mutable references to the components.","A view into a single entry in a map, which may either be …","Iterator yielding keys and a shared reference to their …","Iterator yielding keys and an exclusive reference to …","","A view into an occupied entry in a <code>ComponentMap</code>. It is …","","A view into a vacant entry in a <code>ComponentMap</code>. It is part …","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","Clears the component map for reusing its memory.","","","Returns an iterator over shared references to the …","Returns an iterator over mutable references to the …","Returns <code>true</code> if the key is valid for the secondary map.","","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","Returns a shared reference to the component at the given …","Gets a reference to the value in the entry.","Returns a exclusive reference to the component at the …","Gets a mutable reference to the value in the entry.","","","Inserts the component for the key and returns the …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the vacant entry’s …","","","","","","","","","","","","","Converts the <code>OccupiedEntry</code> into a mutable reference to …","Returns <code>true</code> if there are no components in the secondary …","Returns an iterator over the keys and a shared reference …","Returns an iterator over the keys and an exclusive …","Returns a reference to this entry’s key.","Returns the key from the entry.","Returns the key that would be used when inserting a value …","Returns the number of components in the secondary map.","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Removes the components for the key and returns the …","Takes the value out of the entry, and returns it.","Take the ownership of the key and value from the map.","Reserves the minimum capacity for exactly <code>additional</code> more …","Shrinks the memory consumption of the component map to a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dense secondary map to associated new components for …","Iterator yielding shared references to the components.","Iterator yielding mutable references to the components.","A view into a single entry in a map, which may either be …","Iterator yielding contained keys and shared references to …","Iterator yielding contained keys and exclusive references …","","A view into an occupied entry in a <code>ComponentVec</code>. It is …","","A view into a vacant entry in a <code>ComponentVec</code>. It is part …","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","Clears the component vector for reusing its memory.","","","Returns an iterator over shared references to the …","Returns an iterator over mutable references to the …","Returns <code>true</code> if the key is valid for the secondary map.","","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","Returns a shared reference to the entity at the key.","Gets a reference to the value in the entry.","Returns an exclusive reference to the entity at the key.","Gets a mutable reference to the value in the entry.","","","Inserts the component for the key and returns the …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the vacant entry’s …","","","","","","","","","","","","","Converts the <code>OccupiedEntry</code> into a mutable reference to …","Returns <code>true</code> if there are no components in the secondary …","Returns an iterator over the keys and shared references …","Returns an iterator over the keys and exclusive …","Returns a reference to this entry’s key.","Returns the key from the entry.","Returns the key that would be used when inserting a value …","Returns the number of components in the secondary map.","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Removes the component for the key and returns the removed …","Takes the value out of the entry, and returns it.","Take the ownership of the key and value from the map.","Reserves the minimum capacity for exactly <code>additional</code> more …","Shrinks the memory consumption of the component vector to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,0,2,1,2,1,2,1,2,1,2,1,2,1,3,2,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,0,0,2,1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,4,4,5,4,6,7,8,9,10,5,4,6,7,8,9,10,5,4,5,4,5,4,5,4,5,4,5,4,6,7,8,9,10,5,4,6,7,8,9,10,5,4,4,4,4,4,4,5,4,6,7,8,9,10,5,6,7,8,9,10,4,5,4,4,4,5,6,7,8,9,10,6,7,8,9,10,7,8,7,8,4,6,7,8,9,10,4,5,4,6,7,8,9,10,5,4,6,7,8,9,10,5,4,6,7,8,9,10,5,4,4,0,0,0,0,0,0,0,0,11,12,13,11,12,13,13,13,13,13,13,13,13,11,12,13,13,11,12,13,11,12,13,11,12,13,13,13,13,11,12,13,11,12,13,11,12,13,11,12,13,0,0,0,14,15,16,14,15,16,16,16,16,16,16,16,16,14,15,16,16,16,14,15,16,14,15,16,14,15,16,16,14,15,16,14,15,16,14,15,16,14,15,16,0,0,0,17,18,19,17,18,19,19,19,19,19,19,19,19,17,18,19,19,19,17,18,19,17,18,19,17,18,19,19,17,18,19,17,18,19,17,18,19,17,18,19,0,0,0,0,0,0,20,0,20,0,20,21,20,22,23,24,25,26,27,21,20,22,23,24,25,26,27,21,21,21,21,21,21,21,21,21,21,20,22,23,24,25,26,27,21,20,22,23,24,25,26,27,21,22,21,22,21,21,21,22,23,21,20,22,23,24,25,26,27,24,25,26,27,22,21,21,21,20,22,23,21,24,25,26,27,20,20,20,21,22,22,21,21,24,25,26,27,21,21,20,22,23,24,25,26,27,21,20,22,23,24,25,26,27,21,20,22,23,24,25,26,27,0,0,0,0,0,0,28,0,28,0,28,29,28,30,31,32,33,34,35,29,28,30,31,32,33,34,35,29,29,29,29,29,29,29,29,29,29,28,30,31,32,33,34,35,29,28,30,31,32,33,34,35,29,30,29,30,29,29,29,30,31,29,28,30,31,32,33,34,35,32,33,34,35,30,29,29,29,28,30,31,29,32,33,34,35,28,28,28,29,30,30,29,29,32,33,34,35,29,29,28,30,31,32,33,34,35,29,28,30,31,32,33,34,35,29,28,30,31,32,33,34,35],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["rawidx",3]],[[]],[[]],[[],["ordering",4]],[[["rawidx",3]],["ordering",4]],[[["idx",3]],["bool",15]],[[["rawidx",3]],["bool",15]],[[["formatter",3],["idx",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["rawidx",3]]],[[["u32",15]]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["rawidx",3]],[[],["u32",15]],[[["rawidx",3]],["bool",15]],[[],[["option",4],["ordering",4]]],[[["rawidx",3]],[["option",4],["ordering",4]]],null,null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[],["idx",3]],[[["usize",15]],["idx",3]],[[["u32",15]],["idx",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["entityarena",3]],[[]],[[]],[[]],[[["idx",3]],["bool",15]],[[["idx",3]],["bool",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["idx",3]],["option",4]],[[["idx",3]],["option",4]],[[["idx",3]]],[[["idx",3]]],[[],["indices",3]],[[],["indices",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["entities",3]],[[],["entitiesmut",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["components",3]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["idx",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[["idx",3],["bool",15]],["bool",15]],[[["u32",15]]],[[["idx",3],["bool",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["components",3]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["idx",3]]],[[["idx",3]]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["components",3]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["idx",3]]],[[["idx",3]]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["components",3]],[[],["componentsmut",3]],[[["idx",3]],["bool",15]],[[]],[[["idx",3]],["entry",4]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["idx",3]],["option",4]],[[]],[[["idx",3]],["option",4]],[[]],[[["idx",3]]],[[["idx",3]]],[[["idx",3]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["idx",3]],[[],["idx",3]],[[],["idx",3]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["fnonce",8]]],[[["idx",3]],["option",4]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["components",3]],[[],["componentsmut",3]],[[["idx",3]],["bool",15]],[[]],[[["idx",3]],["entry",4]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["idx",3]],["option",4]],[[]],[[["idx",3]],["option",4]],[[]],[[["idx",3]]],[[["idx",3]]],[[["idx",3]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["idx",3]],[[],["idx",3]],[[],["idx",3]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["fnonce",8]]],[[["idx",3]],["option",4]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"RawIdx"],[3,"Idx"],[8,"DisplayHook"],[3,"EntityArena"],[3,"PhantomEntityArena"],[3,"Indices"],[3,"Entities"],[3,"EntitiesMut"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Components"],[3,"DefaultComponentBitVec"],[3,"Iter"],[3,"Components"],[3,"DefaultComponentMap"],[3,"Iter"],[3,"Components"],[3,"DefaultComponentVec"],[4,"Entry"],[3,"ComponentMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Components"],[3,"ComponentsMut"],[3,"Iter"],[3,"IterMut"],[4,"Entry"],[3,"ComponentVec"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Components"],[3,"ComponentsMut"],[3,"Iter"],[3,"IterMut"]]},\
"runwell_interpreter":{"doc":"Allows to interpret the Runwell IR.","t":[13,13,3,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12],"n":["AlreadySetReturnValue","DivisionByZero","EvaluationContext","EvaluationHasTrapped","InterpretationError","TriedToInitializeNonInput","UninitializedInput","UnmatchingInputTypes","UnmatchingInputValues","borrow","borrow","borrow_mut","borrow_mut","eq","evaluate_function","fmt","fmt","fmt","from","from","into","into","ne","new","to_string","try_from","try_from","try_into","try_into","type_id","type_id","expected_type","given_inputs","given_type","init","input","non_input","prev_return_value","required_inputs","return_value","value"],"q":["runwell_interpreter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_interpreter::InterpretationError","","","","","","","","",""],"d":["","","The evaluation context for the entire virtual machine.","","An error that may occur while evaluating a function.","","","","","","","","","","Evaluates the given function.","","","","","","","","","Creates a new evaluation context from the given shared …","","","","","","","","","","","","","","","","",""],"i":[1,1,0,1,0,1,1,1,1,2,1,2,1,1,2,2,1,1,2,1,2,1,1,2,1,2,1,2,1,2,1,3,4,3,5,6,5,7,4,7,3],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["interpretationerror",4]],["bool",15]],[[["func",6]],[["interpretationerror",4],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["interpretationerror",4]],["bool",15]],[[["module",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null],"p":[[4,"InterpretationError"],[3,"EvaluationContext"],[13,"UnmatchingInputTypes"],[13,"UnmatchingInputValues"],[13,"TriedToInitializeNonInput"],[13,"UninitializedInput"],[13,"AlreadySetReturnValue"]]},\
"runwell_ir":{"doc":"Runwell IR data structures, SSA builder and IR …","t":[8,8,3,3,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,13,13,3,3,13,3,13,13,3,3,13,13,3,3,13,3,13,3,13,3,13,4,13,3,13,3,4,13,4,13,3,13,3,13,3,3,13,3,13,3,13,3,13,3,13,3,13,13,3,13,3,13,13,3,3,13,4,13,3,13,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,4,13,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,4,6,4,3,13,13,3,13,13,13,13,4,4,6,6,3,3,13,13,13,13,13,13,13,13,13,13,13,13,4,4,3,6,13,13,6,3,4,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DisplayEdge","DisplayInstruction","ImmU64","Indent","VisitEdges","VisitEdgesMut","VisitValues","VisitValuesMut","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","display_edge","display_instruction","eq","fmt","fmt","fmt","fmt","from","from","from","get_hash","hash","instr","into","into","into_inner","ne","partial_cmp","primitive","single","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","visit_edges","visit_edges_mut","visit_values","visit_values_mut","Binary","Binary","BinaryFloatInstr","BinaryIntInstr","Branch","BranchInstr","Call","CallIndirect","CallIndirectInstr","CallInstr","Compare","Compare","CompareFloatInstr","CompareIntInstr","Const","ConstInstr","Demote","DemoteFloatInstr","Extend","ExtendIntInstr","Float","FloatInstr","FloatToInt","FloatToIntInstr","HeapAddr","HeapAddrInstr","Instruction","Int","IntInstr","IntToFloat","IntToFloatInstr","Load","LoadInstr","MatchBranch","MatchBranchInstr","MatchSelectInstr","MemoryGrow","MemoryGrowInstr","MemorySize","MemorySizeInstr","Promote","PromoteFloatInstr","Reinterpret","ReinterpretInstr","Return","ReturnInstr","Select","Shift","ShiftIntInstr","Store","StoreInstr","TailCall","TailCallIndirect","TailCallIndirectInstr","TailCallInstr","Terminal","TerminalInstr","Truncate","TruncateIntInstr","Unary","Unary","UnaryFloatInstr","UnaryIntInstr","Unreachable","address","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","const_value","default_results","default_target","display_instruction","display_instruction","display_instruction","display_instruction","display_instruction","dst_type","dst_type","dst_type","dst_type","dst_type","dst_type","dst_type","edge","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","f32","f64","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","func","func_type","func_type","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","heap","i32","i64","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_saturating","is_signed","is_signed","is_signed","is_terminal","iter_results","lhs","lhs","lhs","lhs","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_multi","offset","offset","op","op","op","op","op","op","op","operands","params","params","params","params","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","ptr","result_types","return_values","rhs","rhs","rhs","rhs","selector","selector","selector_type","selector_type","sext","shift_amount","size","source","src","src","src","src","src","src","src","src","src","src_type","src_type","src_type","src_type","src_type","src_type","src_type","table","table","target_edges","target_results","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utils","value","visit_edges","visit_edges","visit_edges","visit_edges","visit_edges_mut","visit_edges_mut","visit_edges_mut","visit_edges_mut","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","visit_values_mut","zext","Abs","Add","Add","And","BinaryFloatOp","BinaryIntOp","Ceil","CompareFloatOp","CompareIntOp","CopySign","Div","Eq","Eq","Floor","Ge","Gt","Le","LeadingZeros","Lt","Max","Min","Mul","Mul","Ne","Ne","Nearest","Neg","Or","PopCount","Rotl","Rotr","Sdiv","Sge","Sgt","ShiftIntOp","Shl","Sle","Slt","Sqrt","Srem","Sshr","Sub","Sub","TrailingZeros","Truncate","Udiv","Uge","Ugt","Ule","Ult","UnaryFloatOp","UnaryIntOp","Urem","Ushr","Xor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","MatchBranchInstrBuilder","MatchSelectInstrBuilder","MatchSelectResultsIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","finish","finish","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","last_pushed_values","next","next_back","nth","nth_back","push_edge","push_results","result_types","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Block","BlockEntity","Const","Edge","EdgeEntity","F32","F32","F32","F64","F64","F64","Float","Float","FloatConst","FloatType","Func","FuncType","FuncTypeEntity","FunctionEntity","I1","I1","I16","I16","I32","I32","I64","I64","I8","I8","Int","Int","IntConst","IntType","LinearMemoryEntity","Mem","Ptr","Ptr","Table","TableEntity","Type","Value","ValueEntity","alignment","alignment","alignment","bit_width","bit_width","bit_width","bits","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","filter_map_float","filter_map_int","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","int_ty","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bits64","into_bits64","into_bits64","max_unsigned_value","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","size_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid_mask","zero","zero","zero"],"q":["runwell_ir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_ir::instr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_ir::instr::operandsrunwell_ir::instr::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_ir::primitived":["Allows to customize display of branching edges in the …","Implemented by all Runwell IR instructions to display …","An immediate <code>u32</code> value of a Runwell IR instruction.","A single indentation.","Allows to immutably visit all edges in an instruction.","Allows to visit all edges in an instruction by mutable …","Allows to immutably visit all values in an instruction.","Allows to visit all values in an instruction by mutable …","","","","","","","","","","","","Displays the given branching edge using the formatter.","","","","","","","","","","","","All Runwell IR SSA instructions.","","","Returns the inner raw <code>u64</code> value.","","","Runwell primitive types and constant values.","Creates a single indentation.","","","","","","","","","","","Visits every edge in the instruction by the given visitor.","Visits every edge in the instruction by mutable reference …","Visits every value in the instruction by the given …","Visits every value in the instruction by mutable …","","","The base of all binary floating point number instructions.","The base of all binary integer instructions.","","Unconditionally branches to another basic block.","","","Calls a function indirectly through a table with a …","Calls a function statically.","","","A comparison instruction for comparing floating point …","Instruction to compare two integer values with respect to …","","An instruction representing a constant value.","","Demotes the source float value from source float type to …","","Extends the integer value from source type to destination …","","An SSA floating point number instruction from the Runwell …","","Instruction to convert a floating point number into an …","","Returns a pointer from the heap at the given location.","An SSA instruction from the Runwell IR.","","An SSA integer instruction from the Runwell IR.","","Instruction to convert an integer into a floating point …","","Loads a value of type <code>ty</code> from the given memory at the …","","A branching table mapping indices to branching targets.","Selects a value from a table of values without IR-level …","","Grows the indexed linear memory by the given amount of …","","Returns the current number of pages of the indexed linear …","","Demotes the source float value from source float type to …","","Reinterprets the bytes of the source from source type to …","","Returns the returned value from to the function’s …","","","The base of all integer shift instructions.","","Stores the value at the given address and offset.","","","A indirect tail call instruction.","A tail call instruction.","","A terminal SSA instruction.","","Truncates the integer value from source type to …","","","The base of all unary floating point number instructions.","The base of all unary integer instructions.","","Returns the address where to store the value in linear …","Returns the address where to store the value in linear …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>MatchBranchInstr</code> builder.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the constant value of the constant instruction.","Returns the value of the default result.","Returns the default target to jump to.","","","","","","Returns the destination type of the reinterpret …","Returns the target floating point number type after …","Returns the target floating point number type after …","Returns the destination integer type after conversion.","Returns the destination type of the truncate instruction.","Returns the destination type of the truncate instruction.","Returns the destination type of the truncate instruction.","Returns the branching edge of the unconditional branch.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>f32</code> constant instruction.","Creates a new <code>f64</code> constant instruction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the called function index.","Returns the called function index.","Returns the expected function type of the indirectly …","Returns the expected function type of the indirectly …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns index of the heap to index into.","Creates a new <code>i32</code> constant instruction.","Creates a new <code>i64</code> constant instruction.","Returns the table index for the indirect call.","Returns the table index for the indirect call.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the conversion is saturating.","Returns <code>true</code> if the resulting integer is interpreted as …","Returns <code>true</code> if the source is treated as a signed integer.","Returns <code>true</code> if the source is treated as a signed integer.","Returns <code>true</code> if the instruction terminates a basic block.","Returns an iterator over the result values of all match …","Returns the left-hand side value of the compare …","Returns the left-hand side value of the compare …","Returns the left-hand side value.","Returns the left-hand side value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new call instruction to call the indexed …","Creates a new call instruction to call the indexed …","Creates a new constant instruction.","Creates a new reinterpret instruction.","Creates a new binary floating point number instruction.","Creates a new comparison instruction for floating point …","Creates a new float demote instruction.","Creates a new float promote instruction.","Creates a new instruction converts from float to signed …","Creates a new unary integer instruction of the given type …","Creates a new binary integer instruction.","Creates a new integer comparison instruction.","Creates a new truncation instruction truncating <code>src</code> from …","Creates a new extension instruction extending <code>src</code> from …","Creates a new instruction that converts from an integer …","Creates a new shift or rotate integer instruction.","Creates a new unary integer instruction of the given type …","Creates a new heap addressing instruction.","Creates a new load instruction.","Creates a new store instruction.","Creates a new memory grow instruction to grow the indexed …","Creates a new memory size instruction to return the size …","Creates a new select operation returning a single value …","Creates a new return instruction returning the given …","Creates a new unconditional branch instruction using the …","Creates a new tail call instruction to call the indexed …","Creates a new call instruction to call the indexed …","Creates a new branching table with the given case, …","Creates a new select operation returning one value tuple …","Returns the address offset of the store instruction.","Returns the address offset of the store instruction.","Returns the floating point comparison operand of the …","Returns the floating point comparison operand of the …","Returns the unary floating point number operand of the …","Returns the binary operand of the instruction.","Returns the compare operand of the instruction.","Returns the shift operand of the instruction.","Returns the unary operand of the instruction.","The operands for some instructions.","Returns the function call parameters.","Returns the SSA function input values for the indirect …","Returns the function call parameters.","Returns the SSA function input values for the indirect …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the pointer where to index into the linear memory.","Returns the shared type of all result values.","Returns the value that is returned by the instruction.","Returns the right-hand side value of the compare …","Returns the right-hand side value of the compare …","Returns the right-hand side value.","Returns the right-hand side value.","Returns the value of the selector.","Returns the selector value determining where to jump to.","Returns the type of the selector.","Returns the integer type of the selector value.","Creates a new sign-extend instruction extending <code>src</code> from …","Returns the right-hand side value.","Returns the size of the area to allow indexing into the …","Returns the left-hand side value.","Returns the source value of the reinterpret instruction.","Returns the source floating point value of the demotion.","Returns the source floating point value of the promotion.","Returns the source floating point value of the conversion.","Returns the source value of the instruction.","Returns the source of the instruction that is to be …","Returns the source of the instruction that is to be …","Returns the source of the instruction that is to be …","Returns the source value of the instruction.","Returns the source type of the reinterpret instruction.","Returns the source floating point number type before …","Returns the source floating point number type before …","Returns the source floating point number type before …","Returns the source type of the truncate instruction.","Returns the source type of the truncate instruction.","Returns the source type of the truncate instruction.","Returns the table for the indirect function call.","Returns the table for the indirect function call.","Returns a slice over all target jumps.","Returns a slice over the target results associated to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of the constant value of the constant …","Returns the type of the compare instruction.","Returns the type of the compare instruction.","Returns the integer type of the return value.","Returns the integer type of the instruction.","Returns the integer type of the instruction.","Returns the integer type of the instruction.","Returns the integer type of the return value.","Returns the type of the value that is stored in linear …","Returns the type of the value that is stored in linear …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Utility types to construct or interact with some …","Returns the value that is to be stored in linear memory.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new zero-extend instruction extending <code>src</code> from …","Evaluates the absolute value of the floating point number.","Adds two floating point numbers.","Evaluates integer addition of two integer values.","Computes the bit-wise and for two integer value.","Binary floating point instruction operand.","Binary integer operand codes.","Rounds to ceil for the floating point number.","Compares two floating point numbers by the associated …","Compares two integers by the associated operand.","Takes the sign of the right-hand side floating point …","Divides the right-hand side floating point number by the …","Equals operator.","Equals operator.","Rounds to floor for the floating point number.","Unsigned greater-equals operator.","Unsigned greater-than operator.","Unsigned less-equals operator.","Counts the number of leading zero bits in the source …","Unsigned less-then operator.","Evaluates the maximum of two floating point numbers.","Evaluates the minimum of two floating point numbers.","Multiplies two floating point numbers.","Evaluates integer multiplication of two integer values.","Not equals operator.","Not equals operator.","Rounds the floating point number to the nearest integer …","Negatives the floating point number.","Computes the bit-wise or for two integer value.","Counts the number of set <code>1</code> bits in the source integer …","Rotates the bits of the left-hand side integer to the …","Rotates the bits of the left-hand side integer to the …","Divides the right-hand side signed integer from the …","Signed greater-equals operator.","Signed greater-than operator.","Integer shift and rotate operand codes.","Shifts the bits of the left-hand side integer to the left …","Signed less-equals operator.","Signed less-then operator.","Evaluates the square root of the floating point number.","Computes the remainder of the left-hand side signed …","Shifts the bits of the left-hand side integer to the …","Subtracts the left-hand side floating point number from …","Subtracts the right-hand side integer from the left-hand …","Counts the number of trailing zero bits in the source …","Truncates the floating point number to the next smaller …","Divides the right-hand side unsigned integer from the …","Unsigned greater-equals operator.","Unsigned greater-than operator.","Unsigned less-equals operator.","Unsigned less-then operator.","Unary floating point instruction operand.","Operand for unary integer instructions.","Computes the remainder of the left-hand side unsigned …","Shifts the bits of the left-hand side integer to the …","Computes the bit-wise xor for two integer value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builder to construct <code>MatchBranchInstr</code> instructions.","Builder used to incrementally build up a multi-value …","Iterator over the result values of all match arms of a …","","","","","","","Pushes the default results tuple to the constructed …","Finishes construction of the <code>MatchBranchInstr</code>.","","","","","","","","","","","Returns the values that have been pushed latest as match …","","","","","Pushes another edge to the <code>MatchBranchInstr</code> under …","Pushes another results tuple match arm to the constructed …","Returns the shared type of all result values.","","","","","","","","","","","The unique index of a basic block entity of the Runwell …","A basic block entity of the Runwell IR.","A Runwell constant value.","A unique edge entity reference.","A branching edge entity.","A <code>f32</code> (32-bit floating point) value.","","","A <code>f64</code> (64-bit floating point) value.","","","","","A constant floating point number value.","Any floating point number type.","A function index.","The unique index of a function type entity of the Runwell …","A function type entity of the Runwell IR.","A function entity of the Runwell IR.","","","","","","","","","","","","","A constant fixed-size integer value.","Any fixed-size integer type.","A linear memory entity of the Runwell IR.","The unique index of a linear memory entity of the Runwell …","","","The unique index of a table entity of the Runwell IR.","A table entity of the Runwell IR.","Any Runwell supported primitive type.","The unique index of a value entity of the Runwell IR.","An SSA value entity of the Runwell IR.","Returns the alignment exponent, <code>N</code> in <code>2^N</code>.","Returns the alignment exponent, <code>N</code> in <code>2^N</code>.","Returns the alignment exponent, <code>N</code> in <code>2^N</code>.","Returns the bit width of the type.","Returns the bit width of the fixed-size integer type.","Returns the bit width of the floating point number type.","Returns the underlying bits of the 32-bit float.","Returns the underlying bits of the 64-bit float.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Some</code> if the type is a float type, otherwise …","Returns <code>Some</code> if the type is an integer type, otherwise …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a 32-bit floating point number from the given …","Returns a 64-bit floating point number from the given …","","","","","","","","","","","","","","","","","Returns the type of the constant fixed-size integer.","","","","","","","","","","","","","","","","Returns the underlying 64-bits of the constant.","Returns the underlying 64-bits of the constant.","Returns the underlying 64-bits of the constant.","Returns the maximum unsigned value representable by the …","","","","","","","","","","","","","","","Returns the amount of bytes values of the type require.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of the constant value.","Returns the type of the constant fixed-size integer.","Returns the type of the constant floating point number.","","","","","","","","","","","","","","","","Returns a bit-mask to check against valid 64-bit patterns.","Returns a zero-constant for the given type.","Returns a zero-constant integer for the given type.","Returns a zero-constant integer for the given type."],"i":[0,0,0,0,0,0,0,0,1,1,2,1,2,1,2,1,2,2,1,3,4,2,1,1,2,2,1,2,2,2,2,0,1,2,2,2,2,0,1,1,2,1,2,1,2,1,2,1,2,5,6,7,8,9,10,0,0,11,0,12,12,0,0,9,10,0,0,12,0,9,0,10,0,12,0,9,0,12,0,0,12,0,10,0,12,0,11,0,0,12,0,12,0,9,0,12,0,11,0,12,10,0,12,0,11,11,0,0,12,0,10,0,9,10,0,0,11,13,14,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,40,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,17,35,40,35,11,37,40,12,18,21,22,23,27,28,29,37,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,17,17,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,9,9,25,25,26,26,27,27,28,28,29,29,30,30,31,31,10,10,32,32,13,13,14,14,33,33,34,34,35,11,36,36,37,38,38,39,39,40,12,12,15,16,17,18,19,20,21,22,23,24,9,9,9,9,9,9,9,25,26,27,28,29,30,31,10,10,10,10,10,10,10,10,32,13,14,33,34,35,11,11,11,11,11,11,11,36,37,38,38,39,39,40,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,15,38,16,39,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,32,17,17,16,39,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,23,23,28,29,12,35,19,20,25,26,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,13,14,33,34,35,36,37,38,39,40,35,13,14,19,20,24,25,26,30,31,0,15,16,38,39,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,32,35,36,19,20,25,26,35,40,35,40,28,30,32,30,18,21,22,23,24,27,28,29,31,18,21,22,23,27,28,29,16,39,40,35,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,36,38,39,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,17,19,20,24,25,26,30,31,13,14,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,34,35,11,36,37,38,39,40,12,0,14,11,37,40,12,11,37,40,12,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,35,11,36,38,39,40,12,15,16,17,18,19,20,21,22,23,24,9,25,26,27,28,29,30,31,10,32,13,14,33,35,11,36,38,39,40,12,28,41,42,43,43,0,0,41,0,0,42,42,44,45,41,44,44,44,46,44,42,42,42,43,44,45,41,41,43,46,47,47,43,45,45,0,47,45,45,41,43,47,42,43,46,41,43,45,45,45,45,0,0,43,47,43,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,42,44,44,41,41,43,43,45,45,47,47,46,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,42,44,41,43,45,47,46,0,0,0,48,49,50,48,49,50,48,50,48,49,50,48,49,50,48,49,50,49,48,49,49,49,49,50,48,48,49,48,49,50,48,49,50,48,49,50,0,0,0,0,0,0,51,52,0,51,52,53,54,0,0,0,0,0,0,55,56,55,56,55,56,55,56,55,56,53,54,0,0,0,0,53,54,0,0,0,0,0,53,55,51,53,55,51,57,58,59,60,61,62,63,64,65,53,55,51,54,56,52,57,58,59,60,61,62,63,64,65,53,55,51,54,56,52,57,58,64,65,53,55,51,54,56,52,57,58,64,65,53,55,51,54,56,52,57,58,53,55,51,54,56,52,57,58,60,61,62,63,64,65,57,58,53,55,51,54,56,52,57,58,53,53,59,59,60,60,61,61,62,62,63,63,64,64,65,65,53,53,55,55,51,51,54,54,56,56,52,52,57,57,58,58,59,60,61,62,63,64,65,53,53,53,53,55,51,54,54,54,54,54,54,56,52,57,57,58,58,57,58,53,55,51,54,56,52,57,58,53,55,51,54,56,52,57,58,56,59,60,61,62,63,64,65,53,55,51,54,56,52,57,58,54,56,52,55,53,54,56,52,57,58,53,55,51,54,56,52,57,58,53,64,65,53,55,51,54,56,52,57,58,53,55,51,54,56,52,57,58,59,60,61,62,63,64,65,53,55,51,54,56,52,57,58,59,60,61,62,63,64,65,53,55,51,54,56,52,57,58,54,56,52,59,60,61,62,63,64,65,53,55,51,54,56,52,57,58,53,54,56,52],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["indent",3]],[[],["immu64",3]],[[]],[[]],[[["immu64",3]],["ordering",4]],[[],["indent",3]],[[["write",8],["edge",6]],["result",6]],[[["displayedge",8],["write",8],["indent",3]],["result",6]],[[["immu64",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u64",15]],["immu64",3]],[[],["u64",15]],[[]],null,[[]],[[]],[[],["u64",15]],[[["immu64",3]],["bool",15]],[[["immu64",3]],[["option",4],["ordering",4]]],null,[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["value",6]],[[],["value",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["value",6],["inttype",4]],["matchbranchinstrbuilder",3]],[[],["callinstr",3]],[[],["callindirectinstr",3]],[[],["constinstr",3]],[[],["reinterpretinstr",3]],[[],["binaryfloatinstr",3]],[[],["comparefloatinstr",3]],[[],["demotefloatinstr",3]],[[],["promotefloatinstr",3]],[[],["floattointinstr",3]],[[],["unaryfloatinstr",3]],[[],["floatinstr",4]],[[],["binaryintinstr",3]],[[],["compareintinstr",3]],[[],["truncateintinstr",3]],[[],["extendintinstr",3]],[[],["inttofloatinstr",3]],[[],["shiftintinstr",3]],[[],["unaryintinstr",3]],[[],["intinstr",4]],[[],["heapaddrinstr",3]],[[],["loadinstr",3]],[[],["storeinstr",3]],[[],["memorygrowinstr",3]],[[],["memorysizeinstr",3]],[[],["matchselectinstr",3]],[[],["terminalinstr",4]],[[],["returninstr",3]],[[],["branchinstr",3]],[[],["tailcallinstr",3]],[[],["tailcallindirectinstr",3]],[[],["matchbranchinstr",3]],[[],["instruction",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["callinstr",3]],["ordering",4]],[[["callindirectinstr",3]],["ordering",4]],[[["constinstr",3]],["ordering",4]],[[["reinterpretinstr",3]],["ordering",4]],[[["binaryfloatinstr",3]],["ordering",4]],[[["comparefloatinstr",3]],["ordering",4]],[[["demotefloatinstr",3]],["ordering",4]],[[["promotefloatinstr",3]],["ordering",4]],[[["floattointinstr",3]],["ordering",4]],[[["unaryfloatinstr",3]],["ordering",4]],[[["floatinstr",4]],["ordering",4]],[[["binaryintinstr",3]],["ordering",4]],[[["compareintinstr",3]],["ordering",4]],[[["truncateintinstr",3]],["ordering",4]],[[["extendintinstr",3]],["ordering",4]],[[["inttofloatinstr",3]],["ordering",4]],[[["shiftintinstr",3]],["ordering",4]],[[["unaryintinstr",3]],["ordering",4]],[[["intinstr",4]],["ordering",4]],[[["heapaddrinstr",3]],["ordering",4]],[[["loadinstr",3]],["ordering",4]],[[["storeinstr",3]],["ordering",4]],[[["memorygrowinstr",3]],["ordering",4]],[[["memorysizeinstr",3]],["ordering",4]],[[["matchselectinstr",3]],["ordering",4]],[[["terminalinstr",4]],["ordering",4]],[[["returninstr",3]],["ordering",4]],[[["branchinstr",3]],["ordering",4]],[[["tailcallinstr",3]],["ordering",4]],[[["tailcallindirectinstr",3]],["ordering",4]],[[["matchbranchinstr",3]],["ordering",4]],[[],["const",4]],[[]],[[],["edge",6]],[[["displayedge",8],["write",8],["indent",3]],["result",6]],[[["displayedge",8],["write",8],["indent",3]],["result",6]],[[["displayedge",8],["write",8],["indent",3]],["result",6]],[[["displayedge",8],["write",8],["indent",3]],["result",6]],[[["displayedge",8],["write",8],["indent",3]],["result",6]],[[],["type",4]],[[],["floattype",4]],[[],["floattype",4]],[[],["inttype",4]],[[],["inttype",4]],[[],["inttype",4]],[[],["floattype",4]],[[],["edge",6]],[[["callinstr",3]],["bool",15]],[[["callindirectinstr",3]],["bool",15]],[[["constinstr",3]],["bool",15]],[[["reinterpretinstr",3]],["bool",15]],[[["binaryfloatinstr",3]],["bool",15]],[[["comparefloatinstr",3]],["bool",15]],[[["demotefloatinstr",3]],["bool",15]],[[["promotefloatinstr",3]],["bool",15]],[[["floattointinstr",3]],["bool",15]],[[["unaryfloatinstr",3]],["bool",15]],[[["floatinstr",4]],["bool",15]],[[["binaryintinstr",3]],["bool",15]],[[["compareintinstr",3]],["bool",15]],[[["truncateintinstr",3]],["bool",15]],[[["extendintinstr",3]],["bool",15]],[[["inttofloatinstr",3]],["bool",15]],[[["shiftintinstr",3]],["bool",15]],[[["unaryintinstr",3]],["bool",15]],[[["intinstr",4]],["bool",15]],[[["heapaddrinstr",3]],["bool",15]],[[["loadinstr",3]],["bool",15]],[[["storeinstr",3]],["bool",15]],[[["memorygrowinstr",3]],["bool",15]],[[["memorysizeinstr",3]],["bool",15]],[[["matchselectinstr",3]],["bool",15]],[[["terminalinstr",4]],["bool",15]],[[["returninstr",3]],["bool",15]],[[["branchinstr",3]],["bool",15]],[[["tailcallinstr",3]],["bool",15]],[[["tailcallindirectinstr",3]],["bool",15]],[[["matchbranchinstr",3]],["bool",15]],[[["instruction",4]],["bool",15]],[[["f32",3]]],[[["f64",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["idx",3],["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unaryfloatinstr",3]],["floatinstr",4]],[[]],[[["promotefloatinstr",3]],["floatinstr",4]],[[["demotefloatinstr",3]],["floatinstr",4]],[[["floattointinstr",3]],["floatinstr",4]],[[["binaryfloatinstr",3]],["floatinstr",4]],[[["comparefloatinstr",3]],["floatinstr",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compareintinstr",3]],["intinstr",4]],[[["truncateintinstr",3]],["intinstr",4]],[[["unaryintinstr",3]],["intinstr",4]],[[]],[[["inttofloatinstr",3]],["intinstr",4]],[[["binaryintinstr",3]],["intinstr",4]],[[["extendintinstr",3]],["intinstr",4]],[[["shiftintinstr",3]],["intinstr",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["branchinstr",3]],["terminalinstr",4]],[[["matchbranchinstr",3]],["terminalinstr",4]],[[["returninstr",3]],["terminalinstr",4]],[[["tailcallinstr",3]],["terminalinstr",4]],[[],["terminalinstr",4]],[[["tailcallindirectinstr",3]],["terminalinstr",4]],[[]],[[]],[[]],[[["callinstr",3]],["tailcallinstr",3]],[[]],[[["callindirectinstr",3]],["tailcallindirectinstr",3]],[[]],[[["shiftintinstr",3]]],[[["binaryfloatinstr",3]]],[[["floatinstr",4]],["instruction",4]],[[["heapaddrinstr",3]],["instruction",4]],[[["binaryintinstr",3]]],[[["comparefloatinstr",3]]],[[["callindirectinstr",3]],["instruction",4]],[[["unaryintinstr",3]]],[[["compareintinstr",3]]],[[["demotefloatinstr",3]]],[[["intinstr",4]],["instruction",4]],[[["matchselectinstr",3]],["instruction",4]],[[["storeinstr",3]],["instruction",4]],[[["callinstr",3]],["instruction",4]],[[["truncateintinstr",3]]],[[["promotefloatinstr",3]]],[[["terminalinstr",4]],["instruction",4]],[[["unaryfloatinstr",3]]],[[["constinstr",3]],["instruction",4]],[[["memorysizeinstr",3]],["instruction",4]],[[["reinterpretinstr",3]],["instruction",4]],[[["memorygrowinstr",3]],["instruction",4]],[[["loadinstr",3]],["instruction",4]],[[["tailcallindirectinstr",3]]],[[["tailcallinstr",3]]],[[["matchbranchinstr",3]]],[[["branchinstr",3]]],[[["returninstr",3]]],[[["floattointinstr",3]]],[[["inttofloatinstr",3]]],[[["extendintinstr",3]]],[[]],[[],["func",6]],[[],["func",6]],[[],["functype",6]],[[],["functype",6]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mem",6]],[[["i32",15]]],[[["i64",15]]],[[],["value",6]],[[],["value",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["matchselectresultsiter",3]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[["callinstr",3]],["bool",15]],[[["callindirectinstr",3]],["bool",15]],[[["constinstr",3]],["bool",15]],[[["reinterpretinstr",3]],["bool",15]],[[["binaryfloatinstr",3]],["bool",15]],[[["comparefloatinstr",3]],["bool",15]],[[["demotefloatinstr",3]],["bool",15]],[[["promotefloatinstr",3]],["bool",15]],[[["floattointinstr",3]],["bool",15]],[[["unaryfloatinstr",3]],["bool",15]],[[["floatinstr",4]],["bool",15]],[[["binaryintinstr",3]],["bool",15]],[[["compareintinstr",3]],["bool",15]],[[["truncateintinstr",3]],["bool",15]],[[["extendintinstr",3]],["bool",15]],[[["inttofloatinstr",3]],["bool",15]],[[["shiftintinstr",3]],["bool",15]],[[["unaryintinstr",3]],["bool",15]],[[["intinstr",4]],["bool",15]],[[["heapaddrinstr",3]],["bool",15]],[[["loadinstr",3]],["bool",15]],[[["storeinstr",3]],["bool",15]],[[["memorygrowinstr",3]],["bool",15]],[[["memorysizeinstr",3]],["bool",15]],[[["matchselectinstr",3]],["bool",15]],[[["terminalinstr",4]],["bool",15]],[[["returninstr",3]],["bool",15]],[[["branchinstr",3]],["bool",15]],[[["tailcallinstr",3]],["bool",15]],[[["tailcallindirectinstr",3]],["bool",15]],[[["matchbranchinstr",3]],["bool",15]],[[["instruction",4]],["bool",15]],[[["func",6]]],[[["functype",6],["table",6],["value",6]]],[[["const",4]]],[[["value",6],["type",4]]],[[["binaryfloatop",4],["floattype",4],["value",6]]],[[["comparefloatop",4],["floattype",4],["value",6]]],[[["floattype",4],["value",6]]],[[["floattype",4],["value",6]]],[[["bool",15],["floattype",4],["value",6],["inttype",4]]],[[["floattype",4],["value",6],["unaryfloatop",4]]],[[["binaryintop",4],["value",6],["inttype",4]]],[[["compareintop",4],["value",6],["inttype",4]]],[[["value",6],["inttype",4]]],[[["value",6],["bool",15],["inttype",4]]],[[["bool",15],["floattype",4],["value",6],["inttype",4]]],[[["shiftintop",4],["value",6],["inttype",4]]],[[["value",6],["unaryintop",4],["inttype",4]]],[[["value",6],["immu64",3],["mem",6]]],[[["value",6],["immu64",3],["type",4]]],[[["value",6],["immu64",3],["type",4]]],[[["value",6],["mem",6]]],[[["mem",6]]],[[["value",6],["inttype",4],["type",4]]],[[]],[[["edge",6]]],[[["func",6]]],[[["functype",6],["table",6],["value",6]]],[[["value",6],["inttype",4],["edge",6]]],[[["value",6],["inttype",4]],["matchselectinstrbuilder",3]],[[],["immu64",3]],[[],["immu64",3]],[[],["binaryfloatop",4]],[[],["comparefloatop",4]],[[],["unaryfloatop",4]],[[],["binaryintop",4]],[[],["compareintop",4]],[[],["shiftintop",4]],[[],["unaryintop",4]],null,[[]],[[]],[[]],[[]],[[["callinstr",3]],[["option",4],["ordering",4]]],[[["callindirectinstr",3]],[["option",4],["ordering",4]]],[[["constinstr",3]],[["option",4],["ordering",4]]],[[["reinterpretinstr",3]],[["option",4],["ordering",4]]],[[["binaryfloatinstr",3]],[["option",4],["ordering",4]]],[[["comparefloatinstr",3]],[["option",4],["ordering",4]]],[[["demotefloatinstr",3]],[["option",4],["ordering",4]]],[[["promotefloatinstr",3]],[["option",4],["ordering",4]]],[[["floattointinstr",3]],[["option",4],["ordering",4]]],[[["unaryfloatinstr",3]],[["option",4],["ordering",4]]],[[["floatinstr",4]],[["option",4],["ordering",4]]],[[["binaryintinstr",3]],[["option",4],["ordering",4]]],[[["compareintinstr",3]],[["option",4],["ordering",4]]],[[["truncateintinstr",3]],[["option",4],["ordering",4]]],[[["extendintinstr",3]],[["option",4],["ordering",4]]],[[["inttofloatinstr",3]],[["option",4],["ordering",4]]],[[["shiftintinstr",3]],[["option",4],["ordering",4]]],[[["unaryintinstr",3]],[["option",4],["ordering",4]]],[[["intinstr",4]],[["option",4],["ordering",4]]],[[["heapaddrinstr",3]],[["option",4],["ordering",4]]],[[["loadinstr",3]],[["option",4],["ordering",4]]],[[["storeinstr",3]],[["option",4],["ordering",4]]],[[["memorygrowinstr",3]],[["option",4],["ordering",4]]],[[["memorysizeinstr",3]],[["option",4],["ordering",4]]],[[["matchselectinstr",3]],[["option",4],["ordering",4]]],[[["terminalinstr",4]],[["option",4],["ordering",4]]],[[["returninstr",3]],[["option",4],["ordering",4]]],[[["branchinstr",3]],[["option",4],["ordering",4]]],[[["tailcallinstr",3]],[["option",4],["ordering",4]]],[[["tailcallindirectinstr",3]],[["option",4],["ordering",4]]],[[["matchbranchinstr",3]],[["option",4],["ordering",4]]],[[],["value",6]],[[]],[[]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["inttype",4]],[[],["inttype",4]],[[["value",6],["inttype",4]]],[[],["value",6]],[[],["immu64",3]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["value",6]],[[],["type",4]],[[],["floattype",4]],[[],["floattype",4]],[[],["floattype",4]],[[],["inttype",4]],[[],["inttype",4]],[[],["inttype",4]],[[],["table",6]],[[],["table",6]],[[]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["floattype",4]],[[],["floattype",4]],[[],["floattype",4]],[[],["inttype",4]],[[],["inttype",4]],[[],["inttype",4]],[[],["inttype",4]],[[],["type",4]],[[],["type",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["value",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["value",6],["inttype",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["binaryfloatop",4]],[[],["comparefloatop",4]],[[],["unaryfloatop",4]],[[],["binaryintop",4]],[[],["compareintop",4]],[[],["shiftintop",4]],[[],["unaryintop",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["binaryfloatop",4]],["ordering",4]],[[["comparefloatop",4]],["ordering",4]],[[["unaryfloatop",4]],["ordering",4]],[[["binaryintop",4]],["ordering",4]],[[["compareintop",4]],["ordering",4]],[[["shiftintop",4]],["ordering",4]],[[["unaryintop",4]],["ordering",4]],[[["binaryfloatop",4]],["bool",15]],[[["comparefloatop",4]],["bool",15]],[[["unaryfloatop",4]],["bool",15]],[[["binaryintop",4]],["bool",15]],[[["compareintop",4]],["bool",15]],[[["shiftintop",4]],["bool",15]],[[["unaryintop",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["binaryfloatop",4]],[["option",4],["ordering",4]]],[[["comparefloatop",4]],[["option",4],["ordering",4]]],[[["unaryfloatop",4]],[["option",4],["ordering",4]]],[[["binaryintop",4]],[["option",4],["ordering",4]]],[[["compareintop",4]],[["option",4],["ordering",4]]],[[["shiftintop",4]],[["option",4],["ordering",4]]],[[["unaryintop",4]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["matchselectinstr",3]],[[["edge",6]],["matchbranchinstr",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["edge",6]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockentity",3]],[[],["valueentity",3]],[[],["type",4]],[[],["inttype",4]],[[],["floattype",4]],[[],["const",4]],[[],["intconst",4]],[[],["floatconst",4]],[[],["f32",3]],[[],["f64",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["type",4]],["ordering",4]],[[["inttype",4]],["ordering",4]],[[["floattype",4]],["ordering",4]],[[["const",4]],["ordering",4]],[[["intconst",4]],["ordering",4]],[[["floatconst",4]],["ordering",4]],[[["f32",3]],["ordering",4]],[[["f64",3]],["ordering",4]],[[],["functionentity",3]],[[],["functypeentity",3]],[[],["linearmemoryentity",3]],[[],["tableentity",3]],[[],["blockentity",3]],[[],["valueentity",3]],[[]],[[]],[[["type",4]],["bool",15]],[[["inttype",4]],["bool",15]],[[["floattype",4]],["bool",15]],[[["const",4]],["bool",15]],[[["intconst",4]],["bool",15]],[[["floatconst",4]],["bool",15]],[[["f32",3]],["bool",15]],[[["f64",3]],["bool",15]],[[],[["floattype",4],["option",4]]],[[],[["option",4],["inttype",4]]],[[["formatter",3]],["result",6]],[[["formatter",3],["edge",6]],["result",6]],[[["formatter",3]],["result",6]],[[["func",6],["formatter",3]],["result",6]],[[["functype",6],["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3],["mem",6]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3],["table",6]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3],["block",6]],["result",6]],[[["formatter",3]],["result",6]],[[["value",6],["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["floattype",4]],["type",4]],[[["inttype",4]],["type",4]],[[],["type",4]],[[]],[[]],[[]],[[["f32",3]]],[[["floatconst",4]],["const",4]],[[["u32",15]],["const",4]],[[["f64",3]]],[[["intconst",4]],["const",4]],[[]],[[]],[[["f32",15]]],[[]],[[]],[[["f64",15]]],[[["u32",15]]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["inttype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["type",4]],["bool",15]],[[["const",4]],["bool",15]],[[["intconst",4]],["bool",15]],[[["floatconst",4]],["bool",15]],[[["f32",3]],["bool",15]],[[["f64",3]],["bool",15]],[[["type",4]],[["option",4],["ordering",4]]],[[["inttype",4]],[["option",4],["ordering",4]]],[[["floattype",4]],[["option",4],["ordering",4]]],[[["const",4]],[["option",4],["ordering",4]]],[[["intconst",4]],[["option",4],["ordering",4]]],[[["floatconst",4]],[["option",4],["ordering",4]]],[[["f32",3]],[["option",4],["ordering",4]]],[[["f64",3]],[["option",4],["ordering",4]]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["type",4]],[[],["type",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u64",15]],[[["type",4]],["const",4]],[[["inttype",4]],["intconst",4]],[[["floattype",4]],["floatconst",4]]],"p":[[3,"Indent"],[3,"ImmU64"],[8,"DisplayEdge"],[8,"DisplayInstruction"],[8,"VisitEdges"],[8,"VisitEdgesMut"],[8,"VisitValues"],[8,"VisitValuesMut"],[4,"FloatInstr"],[4,"IntInstr"],[4,"TerminalInstr"],[4,"Instruction"],[3,"LoadInstr"],[3,"StoreInstr"],[3,"CallInstr"],[3,"CallIndirectInstr"],[3,"ConstInstr"],[3,"ReinterpretInstr"],[3,"BinaryFloatInstr"],[3,"CompareFloatInstr"],[3,"DemoteFloatInstr"],[3,"PromoteFloatInstr"],[3,"FloatToIntInstr"],[3,"UnaryFloatInstr"],[3,"BinaryIntInstr"],[3,"CompareIntInstr"],[3,"TruncateIntInstr"],[3,"ExtendIntInstr"],[3,"IntToFloatInstr"],[3,"ShiftIntInstr"],[3,"UnaryIntInstr"],[3,"HeapAddrInstr"],[3,"MemoryGrowInstr"],[3,"MemorySizeInstr"],[3,"MatchSelectInstr"],[3,"ReturnInstr"],[3,"BranchInstr"],[3,"TailCallInstr"],[3,"TailCallIndirectInstr"],[3,"MatchBranchInstr"],[4,"UnaryFloatOp"],[4,"BinaryFloatOp"],[4,"BinaryIntOp"],[4,"CompareFloatOp"],[4,"CompareIntOp"],[4,"UnaryIntOp"],[4,"ShiftIntOp"],[3,"MatchSelectInstrBuilder"],[3,"MatchSelectResultsIter"],[3,"MatchBranchInstrBuilder"],[4,"FloatType"],[4,"FloatConst"],[4,"Type"],[4,"Const"],[4,"IntType"],[4,"IntConst"],[3,"F32"],[3,"F64"],[4,"EdgeEntity"],[3,"FunctionEntity"],[3,"FuncTypeEntity"],[3,"LinearMemoryEntity"],[3,"TableEntity"],[3,"BlockEntity"],[3,"ValueEntity"]]},\
"runwell_module":{"doc":"","tn":["Error","F32","F64","FunctionBody","GlobalRef","I1","I16","I32","I64","I8","Immutable","MemoryRef","Module","ModuleResources","Mutability","Mutable","RuntimeValue","Store","as_bool","as_f32","as_f64","as_i16","as_i32","as_i64","as_i8","block_params","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","display_edge","edge_args","edge_destination","entry_block","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","get","get_func_type","get_function","get_raw_func_type","get_type","grow","instruction_and_value","into","into","into","into","into","into","into","into","into","into_bits","is_mutable","len_imported_fns","max_value","ne","ne","new","new","primitive","read_bytes","read_primitive","set","size","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utils","value_type","value_type","view","write_bytes","write_primitive","FunctionBuilder","FunctionTypeBuilder","InstructionBuilder","MatchBranchBuilder","MatchSelectInstructionBuilder","ModuleBuilder","ModuleExportsBuilder","ModuleFunctionBodiesBuilder","ModuleFunctionsBuilder","ModuleGlobalsBuilder","ModuleImportsBuilder","ModuleMemoriesBuilder","ModuleMemoryDataBuilder","ModuleTableElementsBuilder","ModuleTablesBuilder","ModuleTypesBuilder","block_parameters","body","bool_select","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","br","call","call_indirect","code_section","constant","create_block","create_block_parameter","current_block","declare_variables","demote","eq","export_function","export_global","export_memory","export_section","export_table","fabs","fadd","fceil","fcmp","fcopysign","fdiv","ffloor","finalize","finalize","finalize","finish","finish","float_to_int","fmax","fmin","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmul","fnearest","fneg","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsqrt","fsub","ftruncate","function_section","global_section","heap_addr","iadd","iand","iclz","icmp","ictz","iextend","if_then_else","import_function","import_global","import_memory","import_section","import_table","imul","initialize_inputs","ins","instr_values","int_to_float","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ior","ipopcnt","irotl","irotr","is_block_reachable","is_param_trivial","ishl","isshr","isub","itruncate","iushr","ixor","load","match_branch","match_select","match_select_multi","memory_data_section","memory_grow","memory_section","memory_size","ne","promote","push_body","push_data","push_edge","push_element","push_function","push_global","push_input","push_memory","push_output","push_results","push_table","push_type","read_var","reinterpret","relink_edge_destination","reserve","reserve","reserve","reserve","reserve","reserve","return_values","sdiv","seal_block","set_start_func","srem","store","switch_to_block","table_element_section","table_section","tail_call","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_section","udiv","unreachable","urem","value_type","var_type","with_edge","with_results","write_var","BasicBlockIsAlreadyFilled","BasicBlockIsAlreadySealed","BranchAlreadyExists","Error","ErrorKind","FunctionBuilder","FunctionBuilderError","Global","GlobalError","ImmutableWrite","IncorrectOrder","IndirectCallToNull","IntegerDivisionByZero","IntegerOverflow","Interrupt","InvalidBasicBlock","InvalidDemotion","InvalidExtension","InvalidFloatToIntegerConversion","InvalidGrow","InvalidInstr","InvalidPromotion","InvalidTruncation","Memory","MemoryError","MemoryOutOfBounds","MissingBasicBlock","MissingDeclarationForVariable","MissingVariableForReplacement","NoCurrentBasicBlock","PredecessorForSealedBlock","RangeOutOfBounds","ReadBeforeWriteVariable","SignatureMismatch","StackOverflow","StoreError","TableOutOfBounds","TooManyVariableDeclarations","Trap","TrapCode","UnfilledBlocksUponFinalize","UnfilledPredecessor","UnmatchingBlockParameters","UnmatchingFunctionReturnType","UnmatchingReinterpretBitwidths","UnmatchingTypes","UnmatchingValueType","UnmatchingVariableType","UnreachableCodeReached","UnreachablePhi","UnsealedBlocksUponFinalize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_hash","hash","i32_code","into","into","into","into","into","into","into","kind","message","ne","ne","ne","ne","ne","ne","source","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_i32_code","try_into_message","try_into_wasm_code","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wasm_code","with_context","access","block","block","block","block","block","block","block_a","block_b","declared_type","expected_type","expected_types","fail_state","from","from_bitwidth","from_type","from_type","from_type","from_type","instr","last_state","new_pred","replace_value","returned_types","sealed_block","src","to","to_bitwidth","to_type","to_type","to_type","to_type","unfilled","unfilled_pred","unsealed","value","value","value","value_type","value_type","var","variable","variable","variable","with_value","expected","found","new_value","old_value","additional_pages","current_pages","len","maximum_pages","offset","pages","ByteRepr","Const","DataSegmentIter","ElementSegmentIter","FunctionType","Global","GlobalGet","GlobalVariable","GlobalVariableEntity","ImportName","InitExpr","Instr","LinearMemoryDecl","LinearMemoryInit","RunwellPrimitive","TYPE","TableDecl","TableInit","Variable","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cmp","default","default","default","default","eq","eq","field_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_types","get_hash","hash","initial_pages","initial_size","inputs","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_iter","into_iter","is_mutable","iter","iter","maximum_pages","maximum_size","module_name","ne","ne","new","new","new","new","next","next","outputs","partial_cmp","push_data","push_element","shrink_to_fit","shrink_to_fit","size_hint","size_hint","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Bytes","Function","MemoryView","Pages","PrimitiveList","body","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","deref","deref_mut","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","idx","inputs","into","into","into","into","into_bytes","into_u16","into_u32","ne","ne","new","outputs","partial_cmp","partial_cmp","push_inputs","push_outputs","read_primitive","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","write_primitive"],"q":["runwell_modulerunwell_module::builderrunwell_module::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_module::error::FunctionBuilderError","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_module::error::GlobalError","","","","runwell_module::error::MemoryError","","","","","","runwell_module::primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","runwell_module::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An error that occurred while translating from Wasm to …","","","A virtual, verified Runwell IR function.","A shared reference to a global value.","","","","","","","A shared reference to a linear memory instance.","A constructed and validated Runwell module.","Module builder resource to incrementally build up a …","Denotes the mutability of a global variable.","","A typed runtime value.","The WebAssembly store.","Returns the <code>bool</code>value or <code>None</code>if the type is not <code>bool</code>.","Returns the <code>f32</code> value or <code>None</code> if the type is not <code>f32</code>.","Returns the <code>f64</code> value or <code>None</code> if the type is not <code>f64</code>.","Returns the <code>i16</code> value or <code>None</code> if the type is not <code>i16</code>.","Returns the <code>i32</code> value or <code>None</code> if the type is not <code>i32</code>.","Returns the <code>i64</code> value or <code>None</code> if the type is not <code>i64</code>.","Returns the <code>i8</code> value or <code>None</code> if the type is not <code>i8</code>.","Returns the value parameters for the given block.","","","","","","","","","","","","","","","","","","","Creates a function builder to incrementally construct the …","Creates a new module builder.","Module section builder types.","","","","","","","","","","Creates a default value for the given value type.","","","Returns the block arguments of the given edge.","Returns the destination of the given edge.","Returns the entry block of the function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the bits to the typed runtime value.","Returns the value of the global value.","Returns the function type of the function if the function …","Returns the function signature and body for the given …","Returns the function type of the function if the function …","Returns the function type at the given index if any.","Grows the linear memory to the new amount of pages.","Returns the nth instruction of the block and its assoc …","","","","","","","","","","Converts the runtime value into a 64-bits representation.","Returns <code>true</code> if the global value is mutable.","Returns the number of important function declarations.","Returns the maximum SSA value used by the function.","","","Creates a new global value in the given store.","Creates a new linear memory in the given store.","Primitive Wasm types that implement conversion to Runwell …","Reads bytes starting at the given offset into the buffer …","Reads the Wasm primitive from the given offset in the …","Sets the value of the global value to the new value.","Returns the current number of pages of the linear memory.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Utility and auxiliary types and definitions.","Returns the value type of the global value.","Returns the value type of the runtime value.","Returns a view into the bytes at …","Writes the given bytes into the linear memory at the …","Writes the Wasm primitive to the given offset in the …","Incrementally guides the construction process to build a …","Used to incrementally construct function type instances.","Builder guiding the construction of Runwell IR …","Builder used in order to construct <code>MatchBranchInstr</code> …","Builder to construct a match select instruction returning …","A module builder to incrementally build up a Runwell …","Constructs module exports.","Constructs module function bodies.","Constructs module function declarations for internally …","Constructs internal module global variables.","Constructs module imports.","Constructs module memory declarations for internally …","Constructs module linear memory initializers.","Constructs module table initializers.","Constructs module table declarations for internally …","Constructs module function types.","Returns the block parameters of the given block.","Start defining the body of the function with its basic …","Selects either <code>if_true</code> or <code>if_false</code> depending on the value …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unconditionally jumps to the target basic block.","","","Returns a module function bodies builder.","","Creates a new basic block for the function and returns a …","Creates a user provided block parameter with the given …","Returns a reference to the current basic block if any.","Declares all function local variables that the function …","Demotes the source float to the other (bigger) float type.","","Pushes a new function export.","Pushes a new global variable export.","Pushes a new linear memory export.","Returns a module export builder.","Pushes a new table export.","Float absolute value.","Float addition.","Float round to ceil.","Float comparison given a comparator.","Float copy-sign operation.","Float division.","Float round to floor.","Finalizes construction of the built function.","Finalizes the construction of the function type.","Finalizes the construction of the module.","Pushes the default results tuple to the constructed …","Finishes construction of the <code>MatchBranchInstr</code>.","Converts the float value into an integer value.","Float maximum element.","Float minimum element.","","","","","","","","","","","","","","","Float multiplication.","Float round to the nearest integer.","Float negate.","","","","","","","","","","","","","","","","","Float square root.","Float subtraction.","Float round to next smaller integer.","Returns a module function declaration builder.","Returns a module global variable builder.","Retrieves the heap address at the byte position for the …","Integer addition.","Integer bit-wise AND.","Integer count leading zeros.","Integer comparison given a comparator.","Integer count trailing zeros.","Extends the source integer to the destination integer …","Conditionally jumps to either <code>then_target</code> or <code>else_target</code> …","Registers a function import to the module and returns an …","Registers a table import to the module and returns an …","Registers a linear memory import to the module and …","Returns a module imports builder.","Registers a table import to the module and returns an …","Integer multiplication.","Initializes the input parameters and their types for the …","Returns an instruction builder to appends instructions to …","Returns the SSA output values of the instruction if any.","Converts the integer value into an floating point value.","","","","","","","","","","","","","","","","","Integer bit-wise OR.","Integer count ones.","Integer rotate left.","Integer rotate right.","Returns <code>true</code> if the block is reachable.","Checks if the incomplete block parameter is trivial.","Integer left shift.","Integer signed right shift.","Integer subtraction.","Truncates the source integer to the destination integer …","Integer unsigned right shift.","Integer bit-wise XOR.","Loads a value of the given type from the pointer with …","Constructs a match-branch instruction.","Selects from the given target result values or the …","Selects from the given target result values or the …","Returns a module memory data builder.","Grows the memory by <code>new_pages</code> new pages and returns the …","Returns a module linear memory declaration builder.","Return the current amount of memory pages of the linear …","","Promotes the source float to the other (bigger) float …","Registers the function body for the given function.","Pushes a new table initializer to the module.","Pushes another edge to the <code>MatchBranchInstr</code> under …","Pushes a new table initializer to the module.","Pushes a new function declaration to the module and …","Pushes a new global variable to the module and returns an …","Pushes another input type.","Pushes a new memory declaration to the module and returns …","Pushes another output type.","Pushes another results tuple match arm to the constructed …","Pushes a new table declaration to the module and returns …","Pushes a new function type to the module and returns an …","Reads the last assigned value of the variable within the …","Reinterprets the source value from its source type into …","Changes the destination of all edges with a destination …","Reserves space for <code>additional</code> function types.","Reserves space for <code>additional</code> function declarations.","Reserves space for <code>additional</code> function bodies.","Reserves space for <code>additional</code> global variable.","Reserves space for <code>additional</code> memory declarations.","Reserves space for <code>additional</code> table declarations.","Returns the given value to the caller of the function.","Signed integer division.","Seals the current basic block.","Sets the start function of the module.","Signed integer remainder.","Stores the given value of the given type to the pointer …","Switches the current block to the given basic block.","Returns a module table elements builder.","Returns a module table declaration builder.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a module types builder.","Unsigned integer division.","Immediately aborts execution when reached.","Unsigned integer remainder.","Returns the type of the given value.","Returns the type of the variable.","Pushes another edge to the <code>MatchBranchInstr</code> under …","Pushes another results tuple match arm to the constructed …","Assigns the value to the variable for the current basic …","","","","An error that occurred while translating from Wasm to …","An error kind that occurred while translating from Wasm …","","Errors that might occur upon building up a Runwell IR …","","Errors that can occur while operating on global values.","","","An indirect call to an uninitialized table entry.","An integer division by zero.","An integer arithmetic operation caused an overflow.","Execution has potentially run too long and may be …","","","","A failed float-to-int conversion.","","","","","","An error that can occur while operating on linear memory …","An out-of-bounds linear memory access.","","","","","","","","Signature mismatch upon indirect call.","The current stack space was exhausted.","Errors that can occur when operating with stores.","An out-of-bounds access to a table.","","A program execution failure trap.","A trap code describing the reason for a trap.","","","","","","","","","Code that was supposed to have been unreachable was …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new trap from the given raw <code>i32</code> status code.","","","","","","","","Returns a shared reference to the underlying kind of …","Constructs a new trap with the given custom trap message.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>i32</code> code of the trap if it has one.","Returns the custom trap reason message if the trap has …","Returns the Wasm specific trap code if there is one.","","","","","","","","Constructs a new trap from the given Wasm specific trap …","Adds context information to the current error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The byte representation of the Wasm primitive.","Resolves at instantiation-time to the constant value.","Iterator over the initialization segments of the linear …","Iterator over the initialization segments of the table …","A function type.","The unique index of a global variable.","Resolves at instantiation-time to the value of the global …","A global variable declaration.","A global variable entity.","A module and field name for an imported entity.","An initializer expression.","The unique index of a basic block entity of the Runwell …","A linear memory declaration.","The initializer for a linear memory.","Implemented by all WebAssembly primitives.","The Runwell type of the primitive type.","A table declaration.","The initializer for a table.","The unique index of a basic block entity of the Runwell …","","","","","","","","","","","","","","","","","","","","","","","Returns a function type builder.","","","","","","","","Returns the field name.","","","","","","","","","","","","","","","","","","","","","","","","","","Creates the Wasm primitive from the given bytes.","Constructs a function type from the given inputs <code>I</code> and …","","","Returns the number of initial pages.","Returns the initial capacity for table elements.","Returns a slice over all input types.","","","","","","","","","","","","Converts the Wasm primitive into its bytes representation.","","","Returns <code>true</code> if the global variable is mutable.","Iterator over the initialization segments of the linear …","Iterator over the initialization segments of the table …","Returns the number of maximum pages if any.","Returns the maximum capacity for table elements if any.","Returns the module name.","","","Creates a new global variable declaration.","Creates a new import name.","Creates a new linear memory declaration.","Creates a new table declaration.","","","Returns a slice over all output types.","","Pushes bytes for initialization at the offset.","Pushes bytes for initialization at the offset.","Shrinks the internal buffers to consume less memory.","Shrinks the internal buffers to consume less memory.","","","","","","","","","","","","","","","","","","","","","","","","","","The type of the global variable.","","","","","","","","","","","","Represents an amount of bytes.","A Runwell function.","Represents a partial view into the contents of a linear …","The amount of pages for a linear memory.","Tuple-types of Runwell primitives implement this trait.","Returns the function body.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the function’s unique index.","Returns the function’s input types.","","","","","Returns the amount of bytes that can be stored with the …","Returns the amount of pages.","Returns the amount of bytes as <code>u32</code>.","","","Creates a new amount of pages.","Returns the function’s output types.","","","Push primitive types to the inputs of a function …","Push primitive types to the output of a function …","Reads the Wasm primitive from the given offset in the …","","","","","","","","","","","","","Returns the function’s signature.","","","","","Writes the Wasm primitive to the given offset in the …"],"i":[0,1,1,0,0,1,1,1,1,1,2,0,0,0,0,2,0,0,1,1,1,1,1,1,1,3,4,3,5,6,2,7,8,1,9,4,3,5,6,2,7,8,1,9,3,6,0,2,7,8,1,2,7,8,1,5,1,9,3,3,3,3,4,1,0,4,4,3,3,5,6,6,2,7,8,1,9,4,4,4,3,5,6,2,7,8,1,1,1,1,1,1,1,1,1,1,1,1,9,1,7,5,6,5,5,8,3,4,3,5,6,2,7,8,1,9,1,7,5,3,4,1,7,8,0,8,8,7,8,2,7,8,1,4,3,6,4,3,5,6,2,7,8,1,9,4,3,5,6,2,7,8,1,9,4,3,5,6,2,7,8,1,9,0,7,1,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,11,12,13,10,11,14,15,16,17,18,19,20,21,22,23,24,25,12,13,10,11,14,15,16,17,18,19,20,21,22,23,24,25,11,11,11,25,11,10,10,10,10,11,16,17,17,17,25,17,11,11,11,11,11,11,11,10,16,25,14,15,11,11,11,10,11,14,15,16,17,18,19,20,21,22,23,24,25,11,11,11,12,13,10,11,14,15,16,17,18,19,20,21,22,23,24,25,11,11,11,25,25,11,11,11,11,11,11,11,11,12,12,12,25,12,11,10,10,10,11,12,13,10,11,14,15,16,17,18,19,20,21,22,23,24,25,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,25,11,25,11,16,11,19,22,15,24,18,20,16,21,16,14,23,13,10,11,10,13,18,19,20,21,23,11,11,10,25,11,11,10,25,25,11,12,13,10,11,14,15,16,17,18,19,20,21,22,23,24,25,12,13,10,11,14,15,16,17,18,19,20,21,22,23,24,25,12,13,10,11,14,15,16,17,18,19,20,21,22,23,24,25,25,11,11,11,10,10,15,14,10,26,26,26,0,0,27,0,28,0,29,26,30,30,30,30,26,26,26,30,31,26,26,26,28,0,30,26,26,26,26,26,31,26,30,30,0,30,26,0,0,26,26,26,26,26,29,26,26,30,26,26,27,26,29,31,32,30,28,27,26,29,31,32,30,28,30,30,27,26,29,31,32,30,28,27,27,26,26,29,29,31,31,32,32,30,30,28,28,27,27,26,29,31,32,30,28,28,28,30,30,32,27,26,29,31,32,30,28,4,32,27,26,29,31,32,28,27,30,27,26,29,31,32,30,28,27,26,29,31,32,30,28,27,26,29,31,32,30,28,32,32,32,27,26,29,31,32,30,28,32,4,33,34,35,36,37,38,39,40,40,41,42,43,44,45,46,47,48,49,50,51,44,52,39,43,52,46,45,46,47,48,49,50,53,34,54,41,42,55,41,42,39,33,41,56,39,57,57,58,58,59,59,60,59,60,60,61,62,0,0,0,0,62,0,0,0,0,0,0,0,0,61,0,0,0,63,64,65,66,62,67,68,69,70,71,72,63,64,65,66,62,67,68,69,70,71,72,63,63,63,65,68,71,63,62,66,63,63,64,65,65,66,62,67,68,69,70,71,72,63,63,64,65,66,62,67,68,69,70,71,72,61,63,63,63,67,70,63,63,64,65,66,62,67,68,69,70,71,72,61,69,72,64,68,71,67,70,66,63,62,64,66,67,70,69,72,63,63,68,71,68,71,69,72,63,63,64,65,66,62,67,68,69,70,71,72,63,64,65,66,62,67,68,69,70,71,72,64,63,64,65,66,62,67,68,69,70,71,72,0,0,0,0,0,73,73,74,75,76,73,74,75,76,73,74,75,73,74,75,74,75,76,76,74,75,73,73,74,75,76,73,74,75,76,73,73,73,74,75,76,75,75,74,74,75,75,73,74,75,77,77,76,73,74,75,73,73,74,75,76,73,74,75,76,73,73,74,75,76,76],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["bool",15],["option",4]]],[[],[["f32",3],["option",4]]],[[],[["option",4],["f64",3]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[["block",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["func",6],["moduleresources",3]],["functionbuilder",3]],[[],["modulebuilder",3]],null,[[],["mutability",4]],[[],["globalref",3]],[[],["memoryref",3]],[[],["runtimevalue",4]],[[]],[[]],[[]],[[]],[[],["moduleresources",3]],[[["type",4]]],[[],["store",3]],[[["write",8],["edge",6]],["result",6]],[[["edge",6]]],[[["edge",6]],["block",6]],[[],["block",6]],[[["error",3]],["bool",15]],[[["runtimevalue",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["functionbuildererror",4]]],[[],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i16",15]]],[[["u16",15]]],[[["u32",15]]],[[]],[[["u64",15]]],[[["u8",15]]],[[["f64",3]]],[[["f32",3]]],[[["i64",15]]],[[["i32",15]]],[[["i8",15]]],[[["bool",15]]],[[]],[[["u64",15],["type",4]],[["invalidbitpattern",3],["result",4]]],[[],["runtimevalue",4]],[[["func",6]],[["option",4],["functiontype",3]]],[[["func",6]],[["function",3],["option",4]]],[[["func",6]],[["option",4],["functype",6]]],[[["functype",6]],[["option",4],["functiontype",3]]],[[["pages",3]],[["memoryerror",4],["result",4]]],[[["usize",15],["block",6]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["bool",15]],[[],["u32",15]],[[],["value",6]],[[["error",3]],["bool",15]],[[["runtimevalue",4]],["bool",15]],[[["store",3],["runtimevalue",4],["mutability",4]]],[[["store",3],["pages",3],["option",4]]],null,[[["usize",15]],[["memoryerror",4],["result",4]]],[[["usize",15]],[["memoryerror",4],["result",4]]],[[["runtimevalue",4]],[["globalerror",4],["result",4]]],[[],["pages",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["type",4]],[[],["type",4]],[[["usize",15]],[["result",4],["memoryview",3],["memoryerror",4]]],[[["usize",15]],[["memoryerror",4],["result",4]]],[[["usize",15]],[["memoryerror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["block",6]]],[[],[["result",4],["error",3]]],[[["value",6],["type",4]],[["error",3],["value",6],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["block",6]],[["instr",6],["result",4],["error",3]]],[[["func",6]],[["instr",6],["result",4],["error",3]]],[[["table",6],["functype",6],["value",6]],[["instr",6],["result",4],["error",3]]],[[],[["string",3],["result",4]]],[[],[["error",3],["value",6],["result",4]]],[[],[["result",4],["block",6],["error",3]]],[[["block",6],["type",4]],[["error",3],["value",6],["result",4]]],[[],[["result",4],["block",6],["error",3]]],[[["u32",15],["type",4]],[["result",4],["error",3]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["functiontypebuilder",3]],["bool",15]],[[["func",6],["str",15]],[["result",4],["string",3]]],[[["str",15],["global",6]],[["result",4],["string",3]]],[[["mem",6],["str",15]],[["result",4],["string",3]]],[[],[["result",4],["moduleexportsbuilder",3],["string",3]]],[[["table",6],["str",15]],[["result",4],["string",3]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6],["comparefloatop",4]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[],[["error",3],["result",4],["functionbody",3]]],[[],["functiontype",3]],[[],[["result",4],["module",3],["string",3]]],[[],[["instr",6],["result",4],["error",3]]],[[["block",6]],[["instr",6],["result",4],["error",3]]],[[["floattype",4],["inttype",4],["bool",15],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[],[["modulefunctionsbuilder",3],["result",4],["string",3]]],[[],[["result",4],["string",3],["moduleglobalsbuilder",3]]],[[["mem",6],["value",6],["immu64",3]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["inttype",4],["compareintop",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4],["bool",15]],[["error",3],["value",6],["result",4]]],[[["value",6],["block",6]],[["instr",6],["result",4],["error",3]]],[[["functype",6],["importname",3]],[["func",6],["result",4],["string",3]]],[[["importname",3],["globalvariable",3]],["global",6]],[[["linearmemorydecl",3],["importname",3]],["mem",6]],[[],[["moduleimportsbuilder",3],["result",4],["string",3]]],[[["tabledecl",3],["importname",3]],["table",6]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["functionbuildercontext",3]]],[[],[["error",3],["instructionbuilder",3],["result",4]]],[[["instr",6]],[["result",4],["error",3]]],[[["bool",15],["inttype",4],["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["block",6]],["bool",15]],[[["value",6]],[["option",4],["error",3],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["type",4],["value",6],["immu64",3]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["result",4],["matchbranchbuilder",3],["error",3]]],[[["inttype",4],["value",6],["type",4]],[["error",3],["value",6],["result",4]]],[[["value",6],["inttype",4]],[["error",3],["matchselectinstructionbuilder",3],["result",4]]],[[],[["string",3],["result",4],["modulememorydatabuilder",3]]],[[["mem",6],["value",6]],[["error",3],["value",6],["result",4]]],[[],[["string",3],["modulememoriesbuilder",3],["result",4]]],[[["mem",6]],[["error",3],["value",6],["result",4]]],[[["functiontypebuilder",3]],["bool",15]],[[["floattype",4],["value",6]],[["error",3],["value",6],["result",4]]],[[["func",6],["functionbody",3]],[["result",4],["string",3]]],[[["mem",6],["initexpr",4]],[["result",4],["string",3]]],[[["block",6]],[["result",4],["error",3]]],[[["table",6],["initexpr",4]],[["result",4],["string",3]]],[[["functype",6]],[["func",6],["result",4],["string",3]]],[[["globalvariable",3],["initexpr",4]],[["string",3],["result",4],["global",6]]],[[]],[[["linearmemorydecl",3]],[["mem",6],["string",3],["result",4]]],[[]],[[],[["result",4],["error",3]]],[[["tabledecl",3]],[["table",6],["string",3],["result",4]]],[[["functiontype",3]],["functype",6]],[[["variable",6]],[["error",3],["value",6],["result",4]]],[[["value",6],["type",4]],[["error",3],["value",6],["result",4]]],[[["instr",6],["block",6]],[["result",4],["error",3]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[],[["instr",6],["result",4],["error",3]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["block",6]],[["result",4],["error",3]]],[[["func",6]],[["result",4],["string",3]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["type",4],["value",6],["immu64",3]],[["instr",6],["result",4],["error",3]]],[[["block",6]],[["result",4],["error",3]]],[[],[["moduletableelementsbuilder",3],["string",3],["result",4]]],[[],[["string",3],["moduletablesbuilder",3],["result",4]]],[[["func",6]],[["instr",6],["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["string",3],["result",4],["moduletypesbuilder",3]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[],[["instr",6],["result",4],["error",3]]],[[["value",6],["inttype",4]],[["error",3],["value",6],["result",4]]],[[["value",6]],["type",4]],[[["variable",6]],[["result",4],["error",3],["type",4]]],[[["block",6]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["value",6],["variable",6]],[["result",4],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["trapcode",4]],[[]],[[["errorkind",4]],["bool",15]],[[["functionbuildererror",4]],["bool",15]],[[["globalerror",4]],["bool",15]],[[["memoryerror",4]],["bool",15]],[[["trap",3]],["bool",15]],[[["trapcode",4]],["bool",15]],[[["storeerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["functionbuildererror",4]],["errorkind",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["memoryerror",4]],["storeerror",4]],[[["globalerror",4]],["storeerror",4]],[[],["u64",15]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["errorkind",4]],[[]],[[["errorkind",4]],["bool",15]],[[["functionbuildererror",4]],["bool",15]],[[["globalerror",4]],["bool",15]],[[["memoryerror",4]],["bool",15]],[[["trap",3]],["bool",15]],[[["storeerror",4]],["bool",15]],[[],[["option",4],["error",8]]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4],["i32",15]]],[[],[["str",15],["option",4]]],[[],[["option",4],["trapcode",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["trapcode",4]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["functiontypebuilder",3]],[[["functiontype",3]],["ordering",4]],[[],["functiontype",3]],[[],["globalvariableentity",3]],[[],["linearmemoryinit",3]],[[],["tableinit",3]],[[["functiontype",3]],["bool",15]],[[["initexpr",4]],["bool",15]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3],["global",6]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[],["u64",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["datasegmentiter",3]],[[],["elementsegmentiter",3]],[[],[["option",4],["u64",15]]],[[],[["u32",15],["option",4]]],[[],["str",15]],[[["functiontype",3]],["bool",15]],[[["initexpr",4]],["bool",15]],[[["bool",15],["type",4]]],[[["str",15]]],[[["u64",15]]],[[["u32",15]]],[[],["option",4]],[[],["option",4]],[[]],[[["functiontype",3]],[["option",4],["ordering",4]]],[[["initexpr",4]]],[[["initexpr",4]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[],["functionbody",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["function",3]],[[],["bytes",3]],[[],["pages",3]],[[]],[[]],[[]],[[["bytes",3]],["ordering",4]],[[["pages",3]],["ordering",4]],[[]],[[]],[[["bytes",3]],["bool",15]],[[["pages",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["func",6]],[[]],[[]],[[]],[[]],[[]],[[],["bytes",3]],[[],["u16",15]],[[],["u32",15]],[[["bytes",3]],["bool",15]],[[["pages",3]],["bool",15]],[[["u16",15]]],[[]],[[["bytes",3]],[["option",4],["ordering",4]]],[[["pages",3]],[["option",4],["ordering",4]]],[[["functiontypebuilder",3]]],[[["functiontypebuilder",3]]],[[["usize",15]],[["memoryerror",4],["result",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["functiontype",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],[["memoryerror",4],["result",4]]]],"p":[[4,"RuntimeValue"],[4,"Mutability"],[3,"FunctionBody"],[3,"Error"],[3,"ModuleResources"],[3,"Module"],[3,"GlobalRef"],[3,"MemoryRef"],[3,"Store"],[3,"FunctionBuilder"],[3,"InstructionBuilder"],[3,"ModuleImportsBuilder"],[3,"ModuleTypesBuilder"],[3,"MatchSelectInstructionBuilder"],[3,"MatchBranchBuilder"],[3,"FunctionTypeBuilder"],[3,"ModuleExportsBuilder"],[3,"ModuleFunctionsBuilder"],[3,"ModuleFunctionBodiesBuilder"],[3,"ModuleGlobalsBuilder"],[3,"ModuleMemoriesBuilder"],[3,"ModuleMemoryDataBuilder"],[3,"ModuleTablesBuilder"],[3,"ModuleTableElementsBuilder"],[3,"ModuleBuilder"],[4,"FunctionBuilderError"],[4,"ErrorKind"],[4,"StoreError"],[4,"GlobalError"],[4,"TrapCode"],[4,"MemoryError"],[3,"Trap"],[13,"MissingDeclarationForVariable"],[13,"UnfilledPredecessor"],[13,"MissingBasicBlock"],[13,"BasicBlockIsAlreadySealed"],[13,"BasicBlockIsAlreadyFilled"],[13,"InvalidBasicBlock"],[13,"MissingVariableForReplacement"],[13,"UnmatchingBlockParameters"],[13,"UnmatchingVariableType"],[13,"UnmatchingValueType"],[13,"UnmatchingFunctionReturnType"],[13,"IncorrectOrder"],[13,"BranchAlreadyExists"],[13,"UnmatchingReinterpretBitwidths"],[13,"InvalidPromotion"],[13,"InvalidExtension"],[13,"InvalidDemotion"],[13,"InvalidTruncation"],[13,"InvalidInstr"],[13,"PredecessorForSealedBlock"],[13,"UnfilledBlocksUponFinalize"],[13,"UnsealedBlocksUponFinalize"],[13,"UnreachablePhi"],[13,"ReadBeforeWriteVariable"],[13,"UnmatchingTypes"],[13,"ImmutableWrite"],[13,"InvalidGrow"],[13,"RangeOutOfBounds"],[8,"RunwellPrimitive"],[4,"InitExpr"],[3,"FunctionType"],[3,"GlobalVariable"],[3,"GlobalVariableEntity"],[3,"ImportName"],[3,"LinearMemoryDecl"],[3,"LinearMemoryInit"],[3,"DataSegmentIter"],[3,"TableDecl"],[3,"TableInit"],[3,"ElementSegmentIter"],[3,"Function"],[3,"Bytes"],[3,"Pages"],[3,"MemoryView"],[8,"PrimitiveList"]]},\
"runwell_wasm":{"doc":"","t":[13,3,13,13,3,4,13,3,13,4,4,4,13,13,3,13,13,3,13,4,3,3,13,4,13,13,13,13,13,3,13,13,13,13,3,4,13,13,13,13,13,13,4,8,13,4,13,13,4,13,13,13,3,4,13,4,3,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12],"n":["Alias","Const","DataCount","EndOfStream","Error","ErrorKind","Event","Export","Export","ExportError","ExportItem","ExportKind","Function","Function","FunctionType","Global","Global","GlobalVariable","Import","ImportError","ImportName","InitExpr","InitExpr","InitExprError","Instance","Instance","InvalidTableElementType","InvalidValueStackLength","Ir","LinearMemoryDecl","MalformedExpression","Memory","Memory","Memory","MemoryDataInit","MemoryError","MissingStackValue","MissingWasmBlock","Module","Module","Module","Primitive","PrimitiveError","Read","Read","ReadError","RelativeDepthExceedsBlockStack","Section","SectionError","Table","Table","Table","TableDecl","TableError","Translate","TranslateError","Type","Unexpected","UnexpectedWasmPayload","UnimplementedOperator","Unknown","UnknownError","Unsupported","Unsupported64BitMemory","UnsupportedDeclaredElement","UnsupportedEventImport","UnsupportedExportKind","UnsupportedModuleImport","UnsupportedNullElementItem","UnsupportedOperator","UnsupportedOperator","UnsupportedPassiveData","UnsupportedPassiveElement","UnsupportedRefType","UnsupportedSharedMemory","UnsupportedTypeDef","UnsupportedTypeDef","UnsupportedV128","UnsupportedWasmSection","UnsupportedWasmType","Wasmparser","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","field","field_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","item","memory","module_name","ne","ne","ne","ne","ne","ne","ne","new","offset","parse","partial_cmp","partial_cmp","read","set_context","set_span","source","source","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unimplemented_operator","with_context","with_span","message","kind","unsupported","actual_len","display","expected","found","len","n","offset","requested_len"],"q":["runwell_wasmrunwell_wasm::ErrorKind","runwell_wasm::ExportError","runwell_wasm::PrimitiveError","runwell_wasm::TranslateError","","","","","","",""],"d":["","A Wasm translated Runwell constant value.","","The source has reached the end of the stream.","An error that occurred while parsing a Wasm input and …","Any kind of error that might occur while parsing a Wasm …","","An export item from a Wasm export section.","","An error upon parsing, validating or operating on Wasm …","An export kind and a reference to the entity it exports.","Supported kinds of exports.","An exported function.","An exported function.","A function type.","An exported global variable.","An exported global variable.","A global variable declaration.","","An error upon parsing, validating or operating on Wasm …","The module and field name of an imported Wasm entity.","A parsed and validated Wasm constant initializer …","","An error that can occur upon parsing a global initializer …","","","","","","A Wasm linear memory declaration.","Encountered a malformed initializer expression.","An exported linear memory.","","An exported linear memory.","A data section item coming from the Wasm parser.","An error that can occur upon parsing and validating …","","","","","","","An error that occurred while operating on Wasm primitives.","The Read trait allows for reading bytes from a source.","","Errors returned by [<code>Read::read</code>].","","","A general error that might occur while parsing Wasm …","An exported table.","","An exported table.","A Wasm table declaration.","An error that might occur while parsing or validating …","","An error that occurred while translating from Wasm to …","A Wasm translated Runwell type.","","An unexpected [<code>wasmparser::Payload</code>] has been encountered.","","","An unknown error occurred.","","","","","","","","","Encountered a generic unsupported operator.","","","Encountered an unsupported reference type operator.","","Encountered an unsupported Wasm type definition.","","Encountered an unsupported <code>V128</code> type operator.","Encountered an unsupported binary Wasm section.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the bytes to initialize the linear memory segment.","","","","","","","","","","","","","","","Returns the export item’s field name.","Returns the field name of the import.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the Runwell type.","Returns the Runwell constant value.","Returns the Runwell function type.","Returns the inner Runwell global variable.","Returns the inner Runwell initializer expression.","Returns the inner Runwell linear memory declaration.","Returns the inner Runwell table declaration.","Returns the export item’s kind and unique ID.","Returns the linear memory ID of the data segment.","Returns the module name of the import.","","","","","","","","Creates a new import name from the given module and field …","Returns the expression denoting the offset for the data …","Parses the binary WebAssembly (Wasm) bytes given through …","","","Pull some bytes from this source into the specified …","Sets or overwrites the context of the error.","Sets or overwrites the span of the error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new error indicating that a supported but …","Sets or overwrites the context of the error and returns …","Sets or overwrites the span of the error and returns <code>self</code>.","","","","","","","","The current length of the block stack.","The nth index (from back) that was tried to accessed.","",""],"i":[1,0,1,2,0,0,1,0,3,0,0,0,4,5,0,4,5,0,3,0,0,0,3,0,1,6,7,8,3,0,9,4,3,5,0,0,8,8,3,1,6,3,0,0,3,0,8,3,0,4,3,5,0,0,3,0,0,10,0,8,1,2,10,11,7,12,13,12,7,8,9,11,7,9,11,0,10,9,0,14,3,4,15,16,17,18,3,13,5,19,8,20,12,21,9,22,11,23,24,14,2,10,25,1,6,7,26,4,15,16,17,18,3,13,5,19,8,20,12,21,9,22,11,23,24,14,2,10,25,1,6,7,26,24,13,19,13,19,8,12,9,14,2,10,25,1,6,7,15,21,18,18,3,3,13,13,5,19,8,8,20,12,12,21,9,9,22,11,11,23,24,14,14,2,2,10,10,25,25,1,1,6,6,7,7,26,4,15,16,17,17,17,17,17,18,18,3,3,3,3,3,3,3,3,3,3,3,3,3,13,5,19,8,20,12,21,9,22,11,23,24,14,14,2,10,25,1,6,7,26,13,19,12,9,14,13,19,12,9,14,4,15,16,17,18,3,13,5,19,8,20,12,21,9,22,11,23,24,14,2,10,25,1,6,7,26,16,17,19,20,22,23,26,15,24,21,13,19,8,14,10,25,7,21,24,0,13,19,27,18,18,3,10,18,3,13,8,12,9,11,14,2,10,25,1,6,7,4,4,15,15,16,16,17,18,3,13,5,19,19,8,20,20,12,21,9,22,22,11,23,23,24,24,14,2,10,25,1,6,7,26,26,4,15,16,17,18,3,13,5,19,8,20,12,21,9,22,11,23,24,14,2,10,25,1,6,7,26,4,15,16,17,18,3,13,5,19,8,20,12,21,9,22,11,23,24,14,2,10,25,1,6,7,26,8,18,18,28,29,30,31,32,33,33,34,34,35,31],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["exporterror",4]],["ordering",4]],[[["functiontype",3]],["ordering",4]],[[["exporterror",4]],["bool",15]],[[["functiontype",3]],["bool",15]],[[["translateerror",4]],["bool",15]],[[["importerror",4]],["bool",15]],[[["initexprerror",4]],["bool",15]],[[["primitiveerror",4]],["bool",15]],[[["readerror",4]],["bool",15]],[[["sectionerror",4]],["bool",15]],[[["unexpectedwasmpayload",3]],["bool",15]],[[["unsupportedwasmsection",4]],["bool",15]],[[["unsupportedtypedef",4]],["bool",15]],[[["tableerror",4]],["bool",15]],[[],["str",15]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["ieee64",3]]],[[["ieee32",3]]],[[["i64",15]]],[[["i32",15]]],[[]],[[]],[[]],[[["primitiveerror",4]],["errorkind",4]],[[["error",3]],["errorkind",4]],[[["string",3]],["errorkind",4]],[[["memoryerror",4]],["errorkind",4]],[[["exporterror",4]],["errorkind",4]],[[["tableerror",4]],["errorkind",4]],[[["readerror",4]],["errorkind",4]],[[["sectionerror",4]],["errorkind",4]],[[["binaryreadererror",3]],["errorkind",4]],[[["translateerror",4]],["errorkind",4]],[[["importerror",4]],["errorkind",4]],[[]],[[["initexprerror",4]],["errorkind",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["type",4]],["primitiveerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["type",4]],[[],["const",4]],[[],["functiontype",3]],[[],["globalvariable",3]],[[],["initexpr",4]],[[],["linearmemorydecl",3]],[[],["tabledecl",3]],[[],["exportitem",4]],[[],["mem",6]],[[],["str",15]],[[["exporterror",4]],["bool",15]],[[["functiontype",3]],["bool",15]],[[["translateerror",4]],["bool",15]],[[["primitiveerror",4]],["bool",15]],[[["sectionerror",4]],["bool",15]],[[["unexpectedwasmpayload",3]],["bool",15]],[[["tableerror",4]],["bool",15]],[[["str",15]]],[[],["initexpr",3]],[[["vec",3]],[["module",3],["result",4],["error",3]]],[[["exporterror",4]],[["option",4],["ordering",4]]],[[["functiontype",3]],[["option",4],["ordering",4]]],[[],[["result",4],["usize",15],["readerror",4]]],[[]],[[["span",3]]],[[],[["option",4],["error",8]]],[[],[["option",4],["error",8]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[["externalkind",4]],["result",4]],[[],["result",4]],[[["export",3]],["result",4]],[[],["result",4]],[[["type",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["functype",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["globaltype",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["initexpr",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["memorytype",3]],["result",4]],[[],["result",4]],[[["data",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["tabletype",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["operator",4]]],[[]],[[["span",3]]],null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"UnsupportedWasmSection"],[4,"ReadError"],[4,"ErrorKind"],[4,"ExportKind"],[4,"ExportItem"],[4,"UnsupportedTypeDef"],[4,"TableError"],[4,"TranslateError"],[4,"InitExprError"],[4,"SectionError"],[4,"MemoryError"],[4,"ImportError"],[4,"ExportError"],[4,"PrimitiveError"],[3,"Export"],[3,"Type"],[3,"Const"],[3,"Error"],[3,"FunctionType"],[3,"GlobalVariable"],[3,"ImportName"],[3,"InitExpr"],[3,"LinearMemoryDecl"],[3,"MemoryDataInit"],[3,"UnexpectedWasmPayload"],[3,"TableDecl"],[8,"Read"],[13,"Module"],[13,"UnsupportedExportKind"],[13,"UnsupportedWasmType"],[13,"InvalidValueStackLength"],[13,"UnimplementedOperator"],[13,"MissingStackValue"],[13,"RelativeDepthExceedsBlockStack"],[13,"UnsupportedOperator"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};