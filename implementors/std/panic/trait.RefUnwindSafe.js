(function() {var implementors = {};
implementors["runwell_entity"] = [{"text":"impl RefUnwindSafe for RawIdx","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Idx&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EntityArena&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Indices&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Entities&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for EntitiesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PhantomEntityArena&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for DefaultComponentBitVec&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; RefUnwindSafe for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; RefUnwindSafe for Components&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for DefaultComponentMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Components&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for DefaultComponentVec&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Components&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for ComponentMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Components&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for ComponentsMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for ComponentVec&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Components&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for ComponentsMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["runwell_interpreter"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for EvaluationContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterpretationError","synthetic":true,"types":[]}];
implementors["runwell_ir"] = [{"text":"impl RefUnwindSafe for Indent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallIndirectInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReinterpretInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryFloatOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryFloatInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareFloatOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareFloatInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DemoteFloatInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PromoteFloatInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatToIntInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryFloatOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryFloatInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryIntInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryIntOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareIntOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareIntInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TruncateIntInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendIntInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntToFloatInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShiftIntInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShiftIntOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryIntOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryIntInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImmU32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeapAddrInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoadInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryGrowInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemorySizeInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchSelectInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchSelectInstrBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MatchSelectResultsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TerminalInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BranchInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfThenElseInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TailCallInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TailCallIndirectInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchBranchInstr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchBranchInstrBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instruction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdgeEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncTypeEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinearMemoryEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F64","synthetic":true,"types":[]}];
implementors["runwell_module"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FunctionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionBuilderError","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for InstructionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for MatchSelectInstructionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionTypeBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Function&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalVariable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalVariableEntity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinearMemoryDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinearMemoryInit","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DataSegmentIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleExportsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleFunctionsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleFunctionBodiesBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleGlobalsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleImportsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleMemoriesBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleMemoryDataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleTablesBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleTableElementsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ModuleTypesBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleResources","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableDecl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableInit","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ElementSegmentIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["runwell_wasm"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportItem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Export&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslateError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalVariable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImportName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitExprError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinearMemoryDecl","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MemoryDataInit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimitiveError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnexpectedWasmPayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedWasmSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedTypeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableDecl","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()