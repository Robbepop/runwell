(function() {var implementors = {};
implementors["runwell_entity"] = [{"text":"impl Freeze for RawIdx","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for Idx&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EntityArena&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Indices&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Entities&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for EntitiesMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PhantomEntityArena&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for DefaultComponentBitVec&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Components&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for DefaultComponentMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Components&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for DefaultComponentVec&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Components&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for ComponentMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Components&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for ComponentsMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for ComponentVec&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Components&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for ComponentsMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]}];
implementors["runwell_interpreter"] = [{"text":"impl&lt;'a&gt; Freeze for EvaluationContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InterpretationError","synthetic":true,"types":[]}];
implementors["runwell_ir"] = [{"text":"impl Freeze for Indent","synthetic":true,"types":[]},{"text":"impl Freeze for CallInstr","synthetic":true,"types":[]},{"text":"impl Freeze for CallIndirectInstr","synthetic":true,"types":[]},{"text":"impl Freeze for ConstInstr","synthetic":true,"types":[]},{"text":"impl Freeze for ReinterpretInstr","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryFloatOp","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryFloatInstr","synthetic":true,"types":[]},{"text":"impl Freeze for CompareFloatOp","synthetic":true,"types":[]},{"text":"impl Freeze for CompareFloatInstr","synthetic":true,"types":[]},{"text":"impl Freeze for DemoteFloatInstr","synthetic":true,"types":[]},{"text":"impl Freeze for PromoteFloatInstr","synthetic":true,"types":[]},{"text":"impl Freeze for FloatToIntInstr","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryFloatOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryFloatInstr","synthetic":true,"types":[]},{"text":"impl Freeze for FloatInstr","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryIntInstr","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryIntOp","synthetic":true,"types":[]},{"text":"impl Freeze for CompareIntOp","synthetic":true,"types":[]},{"text":"impl Freeze for CompareIntInstr","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateIntInstr","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendIntInstr","synthetic":true,"types":[]},{"text":"impl Freeze for IntToFloatInstr","synthetic":true,"types":[]},{"text":"impl Freeze for ShiftIntInstr","synthetic":true,"types":[]},{"text":"impl Freeze for ShiftIntOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryIntOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryIntInstr","synthetic":true,"types":[]},{"text":"impl Freeze for IntInstr","synthetic":true,"types":[]},{"text":"impl Freeze for ImmU32","synthetic":true,"types":[]},{"text":"impl Freeze for HeapAddrInstr","synthetic":true,"types":[]},{"text":"impl Freeze for LoadInstr","synthetic":true,"types":[]},{"text":"impl Freeze for StoreInstr","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryGrowInstr","synthetic":true,"types":[]},{"text":"impl Freeze for MemorySizeInstr","synthetic":true,"types":[]},{"text":"impl Freeze for MatchSelectInstr","synthetic":true,"types":[]},{"text":"impl Freeze for MatchSelectInstrBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MatchSelectResultsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TerminalInstr","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnInstr","synthetic":true,"types":[]},{"text":"impl Freeze for BranchInstr","synthetic":true,"types":[]},{"text":"impl Freeze for IfThenElseInstr","synthetic":true,"types":[]},{"text":"impl Freeze for TailCallInstr","synthetic":true,"types":[]},{"text":"impl Freeze for TailCallIndirectInstr","synthetic":true,"types":[]},{"text":"impl Freeze for BranchTableInstr","synthetic":true,"types":[]},{"text":"impl Freeze for Instruction","synthetic":true,"types":[]},{"text":"impl Freeze for EdgeEntity","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionEntity","synthetic":true,"types":[]},{"text":"impl Freeze for FuncTypeEntity","synthetic":true,"types":[]},{"text":"impl Freeze for LinearMemoryEntity","synthetic":true,"types":[]},{"text":"impl Freeze for TableEntity","synthetic":true,"types":[]},{"text":"impl Freeze for BlockEntity","synthetic":true,"types":[]},{"text":"impl Freeze for ValueEntity","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for IntType","synthetic":true,"types":[]},{"text":"impl Freeze for FloatType","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for IntConst","synthetic":true,"types":[]},{"text":"impl Freeze for FloatConst","synthetic":true,"types":[]},{"text":"impl Freeze for F32","synthetic":true,"types":[]},{"text":"impl Freeze for F64","synthetic":true,"types":[]}];
implementors["runwell_module"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FunctionBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionBuilderError","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for InstructionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for MatchSelectInstructionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionBody","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionType","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionTypeBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Function&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalVariable","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalVariableEntity","synthetic":true,"types":[]},{"text":"impl Freeze for ImportName","synthetic":true,"types":[]},{"text":"impl Freeze for InitExpr","synthetic":true,"types":[]},{"text":"impl Freeze for LinearMemoryDecl","synthetic":true,"types":[]},{"text":"impl Freeze for LinearMemoryInit","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DataSegmentIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleExportsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleFunctionsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleFunctionBodiesBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleGlobalsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleImportsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleMemoriesBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleMemoryDataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleTablesBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleTableElementsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ModuleTypesBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleResources","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for TableDecl","synthetic":true,"types":[]},{"text":"impl Freeze for TableInit","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ElementSegmentIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["runwell_wasm"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ExportError","synthetic":true,"types":[]},{"text":"impl Freeze for ExportKind","synthetic":true,"types":[]},{"text":"impl Freeze for ExportItem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Export&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionType","synthetic":true,"types":[]},{"text":"impl Freeze for TranslateError","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalVariable","synthetic":true,"types":[]},{"text":"impl Freeze for ImportError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImportName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InitExprError","synthetic":true,"types":[]},{"text":"impl Freeze for InitExpr","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryError","synthetic":true,"types":[]},{"text":"impl Freeze for LinearMemoryDecl","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MemoryDataInit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PrimitiveError","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl Freeze for SectionError","synthetic":true,"types":[]},{"text":"impl Freeze for UnexpectedWasmPayload","synthetic":true,"types":[]},{"text":"impl Freeze for UnsupportedWasmSection","synthetic":true,"types":[]},{"text":"impl Freeze for UnsupportedTypeDef","synthetic":true,"types":[]},{"text":"impl Freeze for TableError","synthetic":true,"types":[]},{"text":"impl Freeze for TableDecl","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()