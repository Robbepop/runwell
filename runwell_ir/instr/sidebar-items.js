initSidebarItems({"enum":[["FloatInstr","An SSA floating point number instruction from the Runwell IR."],["Instruction","An SSA instruction from the Runwell IR."],["IntInstr","An SSA integer instruction from the Runwell IR."],["TerminalInstr","A terminal SSA instruction."]],"mod":[["operands","The operands for some instructions."]],"struct":[["BinaryFloatInstr","The base of all binary floating point number instructions."],["BinaryIntInstr","The base of all binary integer instructions."],["BranchInstr","Unconditionally branches to another basic block."],["BranchTableInstr","A branching table mapping indices to branching targets."],["CallIndirectInstr","Calls a function indirectly through a table with a dynamic offset into the table."],["CallInstr","Calls a function statically."],["CompareFloatInstr","A comparison instruction for comparing floating point number with respect to some operand."],["CompareIntInstr","Instruction to compare two integer values with respect to some comparison operator."],["ConstInstr","An instruction representing a constant value."],["DemoteFloatInstr","Demotes the source float value from source float type to destination float type."],["ExtendIntInstr","Extends the integer value from source type to destination type."],["FloatToIntInstr","Instruction to convert a floating point number into an integer."],["HeapAddrInstr","Returns a pointer from the heap at the given location."],["IfThenElseInstr","Conditionally either branches to `then` or `else` branch depending on `condition`."],["IntToFloatInstr","Instruction to convert an integer into a floating point number."],["LoadInstr","Loads a value of type `ty` from the given memory at the given address with given alignment."],["MemoryGrowInstr","Grows the indexed linear memory by the given amount of new memory pages."],["MemorySizeInstr","Returns the current number of pages of the indexed linear memory."],["PromoteFloatInstr","Demotes the source float value from source float type to destination float type."],["ReinterpretInstr","Reinterprets the bytes of the source from source type to destination type."],["ReturnInstr","Returns the returned value from to the function's caller."],["SelectInstr","Choose a value based on a condition without IR-level branching."],["ShiftIntInstr","The base of all integer shift instructions."],["StoreInstr","Stores the value at the given address and offset."],["TailCallIndirectInstr","A indirect tail call instruction."],["TailCallInstr","A tail call instruction."],["TruncateIntInstr","Truncates the integer value from source type to destination type."],["UnaryFloatInstr","The base of all unary floating point number instructions."],["UnaryIntInstr","The base of all unary integer instructions."]]});